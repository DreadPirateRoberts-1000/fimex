CMAKE_MINIMUM_REQUIRED(VERSION 2.8.12)
PROJECT(fimex)

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
INCLUDE(FimexUtils)

FIMEX_CMAKE_SETUP()
FIMEX_VERSION_DEFINES(FIMEX "include/fimex/CDMconstants.h")


SET(FIMEX_PC_REQUIRES "libxml-2.0>=2.6.0")
SET(FIMEX_PC_REQUIRES_PRIVATE "udunits>=2")

FIMEX_FIND_PROJ(PROJ_PC PROJ_LIB PROJ_INC_DIR)
LIST(APPEND FIMEX_PC_REQUIRES_PRIVATE ${PROJ_PC})

OPTION(BUILD_SHARED_LIBS "Select ON (default) for shared lib, OFF for static lib, BOTH for both" ON)

FIND_PACKAGE(Boost REQUIRED COMPONENTS
  date_time
  filesystem
  iostreams
  program_options
  regex system
  unit_test_framework
  )

OPTION(ENABLE_MPI "Use MPI" OFF)
IF(ENABLE_MPI)
  FIND_PACKAGE(MPI)
ENDIF()

OPTION(ENABLE_FIMEX_OMP "Use OpenMP" OFF)
IF(ENABLE_FIMEX_OMP)
  FIND_PACKAGE(OpenMP)
  IF(OPENMP_FOUND)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  ENDIF()
ENDIF()

OPTION(ENABLE_LOG4CPP "Use Log4Cpp" OFF)
IF(ENABLE_LOG4CPP)
  LIST(APPEND FIMEX_PC_REQUIRES_PRIVATE log4cpp)
ENDIF()

OPTION(ENABLE_NETCDF "Use NetCDF" ON)
IF(ENABLE_NETCDF)
  LIST(APPEND FIMEX_PC_REQUIRES_PRIVATE netcdf)
ENDIF()

OPTION(ENABLE_FELT "Use Felt library" ON)

OPTION(ENABLE_ECCODES "Use ecCodes library" OFF)
OPTION(ENABLE_GRIBAPI "Use GribAPI library" OFF)

IF((ENABLE_GRIBAPI) AND (ENABLE_ECCODES))
  MESSAGE(FATAL_ERROR "Cannot use both ecCodes libraries")
ELSEIF(ENABLE_ECCODES)
  FIND_PACKAGE(eccodes 2.4.0 CONFIG REQUIRED)
  SET(eccodes_LIB "eccodes")
  IF(ECCODES_HAVE_ECCODES_THREADS)
    SET(HAVE_GRIB_API_THREADSAFE 1)
  ENDIF()
ELSEIF(ENABLE_GRIBAPI)
  FIND_PATH(GRIBAPI_INC_DIR
    grib_api.h
    HINTS "${GRIBAPI_INSTALL_DIR}/include" "${GRIBAPI_INCLUDE_DIR}"
    )

  FIND_LIBRARY(GRIBAPI_LIB
    NAMES grib_api
    HINTS "${GRIBAPI_INSTALL_DIR}/lib" "${GRIBAPI_LIB_DIR}"
    )

  IF((GRIBAPI_INC_DIR) AND (GRIBAPI_LIB))
    MESSAGE(STATUS "grib_api include: '${GRIBAPI_INC_DIR}'  library: '${GRIBAPI_LIB}'")
  ELSE()
    MESSAGE(FATAL_ERROR "Requested grib_api include/library not found")
  ENDIF()

  OPTION(ENABLE_GRIBAPIPThread "Use GribAPI library with pthread support" ON)
ENDIF()

OPTION(ENABLE_WDB "Use wdb" OFF)
IF(ENABLE_WDB)
  LIST(APPEND FIMEX_PC_REQUIRES_PRIVATE libpq)
ENDIF()

OPTION(ENABLE_METGM "Use metgm" OFF)
IF(ENABLE_METGM)
  LIST(APPEND FIMEX_PC_REQUIRES_PRIVATE metgm)
ENDIF()

OPTION(ENABLE_PRORADXML "Use proradxml" OFF)
IF(ENABLE_PRORADXML)
  LIST(APPEND FIMEX_PC_REQUIRES_PRIVATE libproradxmlrw)
ENDIF()

OPTION(ENABLE_FORTRAN "Use fortran" OFF)
IF(ENABLE_FORTRAN)
  ENABLE_LANGUAGE(Fortran)
ENDIF()

OPTION(ENABLE_FIMEX_VERSIONNUMBERED "Use version numbers in filenames" ON)

PKG_CHECK_MODULES(PC REQUIRED ${FIMEX_PC_REQUIRES};${FIMEX_PC_REQUIRES_PRIVATE})

IF(ENABLE_NETCDF)
  CHECK_NETCDF_HAS_HDF5(HAVE_NETCDF_HDF5_LIB)
ENDIF()


IF(ENABLE_FIMEX_VERSIONNUMBERED)
  SET(MINUS_FIMEX_VERSION "-${FIMEX_VERSION}")
  SET(pc_fimex_includedir "/fimex${MINUS_FIMEX_VERSION}")
  CONFIGURE_FILE("fimex-noversion.pc.in" "fimex.pc" @ONLY)
  INSTALL(FILES "${CMAKE_BINARY_DIR}/fimex.pc"    DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")
  SET(FIMEX_LIBNAME_VERSION "${FIMEX_VERSION}")
  SET(lib_soversion 0)
  SET(lib_version "${lib_soversion}.${FIMEX_VERSION_PATCH}.${FIMEX_VERSION_STATUS_DEC}")
ELSE()
  SET(MINUS_FIMEX_VERSION "")
  SET(pc_fimex_includedir "")
  SET(FIMEX_LIBNAME_VERSION "${FIMEX_VERSION_MAJOR}.${FIMEX_VERSION_MINOR}.${FIMEX_VERSION_PATCH}")
  SET(lib_soversion 0)
  SET(lib_version "${lib_soversion}.0.0")
ENDIF()
SET(lib_name "fimex-${FIMEX_LIBNAME_VERSION}")
SET(FIMEX_INSTALL_INCLUDEDIR "${CMAKE_INSTALL_INCLUDEDIR}${pc_fimex_includedir}")


SET(FIMEX_PC "fimex${MINUS_FIMEX_VERSION}.pc")
FIMEX_GEN_PKGCONFIG(fimex.pc.in "${FIMEX_PC}"
  "${FIMEX_PC_REQUIRES}"
  "${PROJ_LIB}"
  "${CMAKE_INSTALL_LIBDIR}"
  "${FIMEX_INSTALL_INCLUDEDIR};${PROJ_INC_DIR}"
)
INSTALL(FILES "${CMAKE_BINARY_DIR}/${FIMEX_PC}" DESTINATION "${CMAKE_INSTALL_LIBDIR}/pkgconfig")

ENABLE_TESTING()

ADD_SUBDIRECTORY(include)
ADD_SUBDIRECTORY(src)
IF(ENABLE_FORTRAN)
  ADD_SUBDIRECTORY(modules/F90)
ENDIF()
ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(share/etc)

FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
  CONFIGURE_FILE("Doxyfile.in" "Doxyfile" @ONLY)
  ADD_CUSTOM_TARGET(doc
    ${DOXYGEN_EXECUTABLE} "${CMAKE_BINARY_DIR}/Doxyfile"
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    COMMENT "Generating documentation with Doxygen" VERBATIM
    )
ENDIF()
