/*
 fimex

 Copyright (C) 2011 met.no

 Contact information:
 Norwegian Meteorological Institute
 Box 43 Blindern
 0313 OSLO
 NORWAY
 E-mail: post@met.no

 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 MA  02110-1301, USA
 */

#ifndef WCIREADQUERYSPECIFICATION_H_
#define WCIREADQUERYSPECIFICATION_H_

#include <boost/date_time/posix_time/ptime.hpp>
#include <set>
#include <string>

namespace MetNoFimex
{
namespace wdb
{
class DataSanitizer;


/**
 * A specification for creating a single wci.read query.
 *
 * The object is first created by a default constructor. A query after that
 * will then return all available data in database. Later, a set of
 * restrictions may be added to this object, such as which data providers or
 * value parameters to request.
 */
class WciReadQuerySpecification
{
public:

	/**
	 * The resulting object will request all available data in a wdb
	 * database. To restrict the amount of data requested, use the add- or
	 * set- methods.
	 */
	WciReadQuerySpecification();

	WciReadQuerySpecification(
			const std::set<std::string> * dataProvider,
			const std::string * location,
			const std::string * referenceTime,
			const std::string * validTime,
			const std::set<std::string> * parameter,
			const std::set<int> * dataVersion);

	/**
	 * Create a query string for this object.
	 */
	std::string query(const DataSanitizer & sanitizer) const;


	/**
	 * Add a data provider to the request list. You may add any number of
	 * providers, but adding none means requesting an.
	 */
	void addDataProvider(const std::string & dataProvider);

	/**
	 * Only request data from the given location. Only one location may be
	 * given, but if you don't specify any location, all available will be
	 * requested.
	 */
	void setLocation(const std::string & location);

	/**
	 * Request data with reference time matching the given string. The format
	 * for the string is equal to that used in wdb. Refer to wdb documentation
	 * for details. Only one value for reference time may exist.
	 *
	 * In addition to the wdb syntax, referenceTime may be "latest", which
	 * means that you want the most current available reference time which
	 * matches the rest of the query.
	 */
	void setReferenceTime(const std::string & referenceTime);

	/**
	 * Request data with valid time matching the given string. The format
	 * for the string is equal to that used in wdb. Refer to wdb documentation
	 * for details. Only one value for valid time may exist.
	 */
	void setValidTime(const std::string & validTime);

	/**
	 * Add a value parameter to the request list. You may add any number of
	 * parameters, but adding none means requesting any.
	 */
	void addParameter(const std::string & parameter);

	/**
	 * Add a data version to the request list. You may add any number of
	 * versions, but adding none means requesting any.
	 *
	 * Data versions may be negative, where -1 means "highest", -2 second
	 * highest and so on.
	 */
	void addDataVersion(int version);


	const std::set<std::string> * dataProvider() const { return dataProvider_.empty() ? 0 : & dataProvider_; }
	const std::string * location() const { return location_.empty() ? 0 : & location_; }
	const std::string * referenceTime() const { return referenceTime_.empty() ? 0 : & referenceTime_; }
	const std::string * validTime() const { return validTime_.empty() ? 0 : & validTime_; }
	const std::set<std::string> * parameter() const { return parameter_.empty() ? 0 : & parameter_; }
	const std::set<int> * dataVersion() const { return dataVersion_.empty() ? 0 : & dataVersion_; }


	/**
	 * The query will request data elements in the order of this enum, which
	 * may be used to index result sets returned from wci.read queries
	 * generated by this class.
	 */
	enum ReadIdx
	{
		ValueParameterName,
		ValueParameterUnit,
		LevelParameterName,
		LevelUnitName,
		LevelFrom,
		LevelTo,
		DataVersion,
		ReferenceTime,
		ValidTimeFrom,
		ValidTimeTo,
		PlaceName,
		Value
	};

private:

	std::ostream & referenceTimeQuery_(std::ostream & s, const DataSanitizer & sanitizer) const;

	std::set<std::string> dataProvider_;
	std::string location_;
	std::string referenceTime_;
	std::string validTime_;
	std::set<std::string> parameter_;
	std::set<int> dataVersion_;

	friend bool operator == (const WciReadQuerySpecification & a, const WciReadQuerySpecification & b);
};

inline bool operator == (const WciReadQuerySpecification & a, const WciReadQuerySpecification & b)
{
	return a.dataProvider_ == b.dataProvider_ and
			a.location_ == b.location_ and
			a.referenceTime_ == b.referenceTime_ and
			a.parameter_ == b.parameter_ and
			a.dataVersion_ == b.dataVersion_;
}

std::ostream & operator << (std::ostream & s, const WciReadQuerySpecification & spec);

}
}

#endif /* WCIREADQUERYSPECIFICATION_H_ */
