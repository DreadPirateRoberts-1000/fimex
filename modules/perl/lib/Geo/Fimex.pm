# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Geo::Fimex;
use base qw(Exporter);
use base qw(DynaLoader);
package Geo::Fimexc;
bootstrap Geo::Fimex;
package Geo::Fimex;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Geo::Fimex;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Geo::Fimex;


############# Class : Geo::Fimex::IntVector ##############

package Geo::Fimex::IntVector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Geo::Fimex );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Geo::Fimexc::new_IntVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *Geo::Fimexc::IntVector_size;
*empty = *Geo::Fimexc::IntVector_empty;
*clear = *Geo::Fimexc::IntVector_clear;
*push = *Geo::Fimexc::IntVector_push;
*pop = *Geo::Fimexc::IntVector_pop;
*get = *Geo::Fimexc::IntVector_get;
*set = *Geo::Fimexc::IntVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Geo::Fimexc::delete_IntVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Geo::Fimex::DoubleVector ##############

package Geo::Fimex::DoubleVector;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Geo::Fimex );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Geo::Fimexc::new_DoubleVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *Geo::Fimexc::DoubleVector_size;
*empty = *Geo::Fimexc::DoubleVector_empty;
*clear = *Geo::Fimexc::DoubleVector_clear;
*push = *Geo::Fimexc::DoubleVector_push;
*pop = *Geo::Fimexc::DoubleVector_pop;
*get = *Geo::Fimexc::DoubleVector_get;
*set = *Geo::Fimexc::DoubleVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Geo::Fimexc::delete_DoubleVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Geo::Fimex::SliceBuilder ##############

package Geo::Fimex::SliceBuilder;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Geo::Fimex );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Geo::Fimexc::new_SliceBuilder(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Geo::Fimexc::delete_SliceBuilder($self);
        delete $OWNER{$self};
    }
}

*setStartAndSize = *Geo::Fimexc::SliceBuilder_setStartAndSize;
*setAll = *Geo::Fimexc::SliceBuilder_setAll;
*getDimensionStartPositions = *Geo::Fimexc::SliceBuilder_getDimensionStartPositions;
*getDimensionSizes = *Geo::Fimexc::SliceBuilder_getDimensionSizes;
*getDimensionNames = *Geo::Fimexc::SliceBuilder_getDimensionNames;
*getUnsetDimensionNames = *Geo::Fimexc::SliceBuilder_getUnsetDimensionNames;
*getMaxDimensionSizes = *Geo::Fimexc::SliceBuilder_getMaxDimensionSizes;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Geo::Fimex::CDM ##############

package Geo::Fimex::CDM;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Geo::Fimex );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Geo::Fimexc::delete_CDM($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Geo::Fimex::CDMReader ##############

package Geo::Fimex::CDMReader;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Geo::Fimex );
%OWNER = ();
%ITERATORS = ();
*getCDM = *Geo::Fimexc::CDMReader_getCDM;
*getSliceVecInUnit = *Geo::Fimexc::CDMReader_getSliceVecInUnit;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Geo::Fimexc::delete_CDMReader($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Geo::Fimex::boost__shared_ptrCDMReader ##############

package Geo::Fimex::boost__shared_ptrCDMReader;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Geo::Fimex );
%OWNER = ();
%ITERATORS = ();
*__deref__ = *Geo::Fimexc::boost__shared_ptrCDMReader___deref__;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Geo::Fimexc::delete_boost__shared_ptrCDMReader($self);
        delete $OWNER{$self};
    }
}

*getCDM = *Geo::Fimexc::boost__shared_ptrCDMReader_getCDM;
*getSliceVecInUnit = *Geo::Fimexc::boost__shared_ptrCDMReader_getSliceVecInUnit;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Geo::Fimex::CDMFileReaderFactory ##############

package Geo::Fimex::CDMFileReaderFactory;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Geo::Fimex );
%OWNER = ();
%ITERATORS = ();
*create = *Geo::Fimexc::CDMFileReaderFactory_create;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Geo::Fimexc::delete_CDMFileReaderFactory($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Geo::Fimex::NetCDF_CDMWriter ##############

package Geo::Fimex::NetCDF_CDMWriter;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Geo::Fimex );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Geo::Fimexc::new_NetCDF_CDMWriter(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Geo::Fimexc::delete_NetCDF_CDMWriter($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Geo::Fimex;

1;
