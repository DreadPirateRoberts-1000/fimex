/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGR


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
extern "C" {
#endif

/* Remove global namespace pollution */
#if !defined(SWIG_NO_R_NO_REMAP)
# define R_NO_REMAP
#endif
#if !defined(SWIG_NO_STRICT_R_HEADERS)
# define STRICT_R_HEADERS
#endif

#include <Rdefines.h>
#include <Rversion.h>
#include <stdlib.h>
#include <assert.h>

#if R_VERSION >= R_Version(2,6,0)
#define VMAXTYPE void *
#else
#define VMAXTYPE char *
#endif

/*
  This is mainly a way to avoid having lots of local variables that may 
  conflict with those in the routine.

   Change name to R_SWIG_Callb....
*/
typedef struct RCallbackFunctionData {

  SEXP fun;
  SEXP userData;


  SEXP expr;
  SEXP retValue;
  int errorOccurred;

  SEXP el;  /* Temporary pointer used in the construction of the expression to call the R function. */

  struct RCallbackFunctionData *previous;   /* Stack */

} RCallbackFunctionData;

static RCallbackFunctionData  *callbackFunctionDataStack;


SWIGRUNTIME SEXP
R_SWIG_debug_getCallbackFunctionData()
{
  int n, i;
  SEXP ans;
  RCallbackFunctionData  *p = callbackFunctionDataStack;

  n = 0;
  while(p) { 
    n++;
    p = p->previous;
  }

  Rf_protect(ans = Rf_allocVector(VECSXP, n));
  for(p = callbackFunctionDataStack, i = 0; i < n; p = p->previous, i++) 
      SET_VECTOR_ELT(ans, i, p->fun);

  Rf_unprotect(1);

  return(ans);
}



SWIGRUNTIME RCallbackFunctionData *
R_SWIG_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
   RCallbackFunctionData *el;
   el = (RCallbackFunctionData *) calloc(1, sizeof(RCallbackFunctionData));
   el->fun = fun;
   el->userData = userData;
   el->previous = callbackFunctionDataStack;

   callbackFunctionDataStack = el;

   return(el);
}


SWIGRUNTIME SEXP
R_SWIG_R_pushCallbackFunctionData(SEXP fun, SEXP userData)
{
    R_SWIG_pushCallbackFunctionData(fun, userData);
    return R_NilValue;
}

SWIGRUNTIME RCallbackFunctionData *
R_SWIG_getCallbackFunctionData()
{
  if(!callbackFunctionDataStack) {
    Rf_error("Supposedly impossible error occurred in the SWIG callback mechanism."
            "  No callback function data set.");
  }
  
  return callbackFunctionDataStack;
}

SWIGRUNTIME void
R_SWIG_popCallbackFunctionData(int doFree)
{
  RCallbackFunctionData  *el = NULL;
  if(!callbackFunctionDataStack)
    return ; /* Error !!! */

  el = callbackFunctionDataStack ;
  callbackFunctionDataStack = callbackFunctionDataStack->previous;

  if(doFree)
     free(el);
}


/*
  Interface to S function
      is(obj, type)
  which is to be used to determine if an 
  external pointer inherits from the right class.

  Ideally, we would like to be able to do this without an explicit call to the is() function.
  When the S4 class system uses its own SEXP types, then we will hopefully be able to do this
  in the C code.

  Should we make the expression static and preserve it to avoid the overhead of 
  allocating each time.
*/
SWIGRUNTIME int
R_SWIG_checkInherits(SEXP obj, SEXP tag, const char *type)
{
  SEXP e, val;
  int check_err = 0;

  Rf_protect(e = Rf_allocVector(LANGSXP, 3));
  SETCAR(e, Rf_install("extends"));

  SETCAR(CDR(e), Rf_mkString(CHAR(PRINTNAME(tag))));
  SETCAR(CDR(CDR(e)), Rf_mkString(type));

  val = R_tryEval(e, R_GlobalEnv, &check_err);
  Rf_unprotect(1);
  if(check_err) 
    return(0);


  return(LOGICAL(val)[0]);
}


SWIGRUNTIME void *
R_SWIG_resolveExternalRef(SEXP arg, const char * const type, const char * const argName, Rboolean nullOk)
{
  void *ptr;
  SEXP orig = arg;

  if(TYPEOF(arg) != EXTPTRSXP) 
    arg = GET_SLOT(arg, Rf_mkString("ref"));

  
  if(TYPEOF(arg) != EXTPTRSXP) {
    Rf_error("argument %s must be an external pointer (from an ExternalReference)", argName);
  }


  ptr = R_ExternalPtrAddr(arg);

  if(ptr == NULL && nullOk == (Rboolean) FALSE) {
    Rf_error("the external pointer (of type %s) for argument %s has value NULL", argName, type);
  }

  if(type[0] && R_ExternalPtrTag(arg) != Rf_install(type) && strcmp(type, "voidRef")
      && !R_SWIG_checkInherits(orig,  R_ExternalPtrTag(arg), type)) {
    Rf_error("the external pointer for argument %s has tag %s, not the expected value %s",
             argName, CHAR(PRINTNAME(R_ExternalPtrTag(arg))), type);
  }


  return(ptr);
}

SWIGRUNTIME void
R_SWIG_ReferenceFinalizer(SEXP el)
{
  void *ptr = R_SWIG_resolveExternalRef(el, "", "<finalizer>",  (Rboolean) 1);
  fprintf(stderr, "In R_SWIG_ReferenceFinalizer for %p\n", ptr);
  Rf_PrintValue(el);

  if(ptr) {
     if(TYPEOF(el) != EXTPTRSXP)
        el = GET_SLOT(el, Rf_mkString("ref"));

     if(TYPEOF(el) == EXTPTRSXP)
        R_ClearExternalPtr(el);

     free(ptr);
  }

  return;
}

typedef enum {R_SWIG_EXTERNAL, R_SWIG_OWNER } R_SWIG_Owner;

SWIGRUNTIME SEXP
SWIG_MakePtr(void *ptr, const char *typeName, R_SWIG_Owner owner)
{
  SEXP external, r_obj;
  const char *p = typeName;

  if(typeName[0] == '_')
     p = typeName + 1;

  Rf_protect(external = R_MakeExternalPtr(ptr, Rf_install(typeName), R_NilValue));
  Rf_protect(r_obj = NEW_OBJECT(MAKE_CLASS((char *) typeName)));

  if(owner)
    R_RegisterCFinalizer(external, R_SWIG_ReferenceFinalizer);

  r_obj = SET_SLOT(r_obj, Rf_mkString((char *) "ref"), external);
  SET_S4_OBJECT(r_obj);
  Rf_unprotect(2);

  return(r_obj);
}


SWIGRUNTIME SEXP
R_SWIG_create_SWIG_R_Array(const char *typeName, SEXP ref, int len)
{
   SEXP arr;

/*XXX remove the char * cast when we can. MAKE_CLASS should be declared appropriately. */
   Rf_protect(arr = NEW_OBJECT(MAKE_CLASS((char *) typeName)));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("ref"), ref));
   Rf_protect(arr = R_do_slot_assign(arr, Rf_mkString("dims"), Rf_ScalarInteger(len)));

   Rf_unprotect(3); 			   
   SET_S4_OBJECT(arr);	
   return arr;
}

#define ADD_OUTPUT_ARG(result, pos, value, name)  r_ans = AddOutputArgToReturn(pos, value, name, OutputValues);

SWIGRUNTIME SEXP
AddOutputArgToReturn(int pos, SEXP value, const char *name, SEXP output)
{
  SET_VECTOR_ELT(output, pos, value);

  return(output);
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  SEXP rptr = R_MakeExternalPtr(ptr, 
  R_MakeExternalPtr(type, R_NilValue, R_NilValue), R_NilValue); 
  SET_S4_OBJECT(rptr);
//  rptr = Rf_setAttrib(rptr, R_ClassSymbol, mkChar(SWIG_TypeName(type)));
  return rptr;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_R_ConvertPtr(SEXP obj, void **ptr, swig_type_info *ty, int flags) {
  void *vptr;
  if (!obj) return SWIG_ERROR;
  if (obj == R_NilValue) {
    if (ptr) *ptr = NULL;
    return SWIG_OK;
  }

  vptr = R_ExternalPtrAddr(obj);
  if (ty) {
    swig_type_info *to = (swig_type_info*) 
      R_ExternalPtrAddr(R_ExternalPtrTag(obj));
    if (to == ty) {
      if (ptr) *ptr = vptr;
    } else {
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      int newmemory = 0;
      if (ptr) *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  } else {
      if (ptr) *ptr = vptr;
 }
  return SWIG_OK;
}

SWIGRUNTIME swig_module_info *
SWIG_GetModule(void *v) {
  static void *type_pointer = (void *)0;
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_SetModule(void *v, swig_module_info *swig_module) {
}

typedef struct {
  void *pack;
  swig_type_info *ty;
  size_t size;
} RSwigPacked;

/* Create a new packed object */

SWIGRUNTIMEINLINE SEXP RSwigPacked_New(void *ptr, size_t sz,
		  swig_type_info *ty) {
  SEXP rptr;
  RSwigPacked *sobj = 
  (RSwigPacked*) malloc(sizeof(RSwigPacked));
  if (sobj) {
    void *pack = malloc(sz);
    if (pack) {
      memcpy(pack, ptr, sz);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = sz;
    } else {
      sobj = 0;
    }
  }
  rptr = R_MakeExternalPtr(sobj, R_NilValue, R_NilValue); 
  return rptr;
}

SWIGRUNTIME swig_type_info *
RSwigPacked_UnpackData(SEXP obj, void *ptr, size_t size)
{
    RSwigPacked *sobj = 
        (RSwigPacked *)R_ExternalPtrAddr(obj);
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
}

SWIGRUNTIMEINLINE SEXP
SWIG_R_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? RSwigPacked_New((void *) ptr, sz, type) : R_NilValue;
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_R_ConvertPacked(SEXP obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = RSwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL); } else 



  #define SWIG_exception(code, msg) do { switch (code) {case SWIG_IndexError: return Rf_ScalarLogical(NA_LOGICAL); default: Rf_warning(msg); return Rf_ScalarLogical(NA_LOGICAL); return Rf_ScalarLogical(NA_LOGICAL);}; } while(0) 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_MetNoFimex__CDM swig_types[0]
#define SWIGTYPE_p_MetNoFimex__CDMFileReaderFactory swig_types[1]
#define SWIGTYPE_p_MetNoFimex__CDMReader swig_types[2]
#define SWIGTYPE_p_MetNoFimex__NetCDF_CDMWriter swig_types[3]
#define SWIGTYPE_p_MetNoFimex__SliceBuilder swig_types[4]
#define SWIGTYPE_p_allocator_type swig_types[5]
#define SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t swig_types[6]
#define SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t swig_types[7]
#define SWIGTYPE_p_char swig_types[8]
#define SWIGTYPE_p_difference_type swig_types[9]
#define SWIGTYPE_p_mifi_cdm_reader swig_types[10]
#define SWIGTYPE_p_mifi_slicebuilder swig_types[11]
#define SWIGTYPE_p_size_type swig_types[12]
#define SWIGTYPE_p_std__allocatorT_double_t swig_types[13]
#define SWIGTYPE_p_std__allocatorT_size_t_t swig_types[14]
#define SWIGTYPE_p_std__allocatorT_std__string_t swig_types[15]
#define SWIGTYPE_p_std__ostream swig_types[16]
#define SWIGTYPE_p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t swig_types[17]
#define SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t swig_types[18]
#define SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t swig_types[19]
#define SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t swig_types[20]
#define SWIGTYPE_p_value_type swig_types[21]
static swig_type_info *swig_types[23];
static swig_module_info swig_module = {swig_types, 22, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#define SWIGVERSION 0x020004 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


/* Put header files here or function declarations below */
#include "boost/shared_ptr.hpp"
#include "fimex/Data.h"
#include "fimex/CDMReader.h"
#include "fimex/CDMExtractor.h"
#include "fimex/CDMQualityExtractor.h"
#include "fimex/CDMInterpolator.h"
#include "fimex/CDMProcessor.h"
#include "fimex/CDMTimeInterpolator.h"
#include "fimex/Null_CDMWriter.h"
#include "fimex/NetCDF_CDMWriter.h"
#include "fimex/NcmlCDMReader.h"
#include "rfimexSliceBuilder.h"
#include "fimex/Logger.h"
#include "fimex/CDMFileReaderFactory.h"
#include "fimex/CDMException.h"
#include "fimex/c_fimex.h"
#include "fimex/mifi_cdm_reader.h"
#include "fimex/coordSys/CoordinateSystem.h"

namespace MetNoFimex {
/*
 * lists (in that order) time, x, y, z, forecastRefTime, other1, other2, ... dimensions
 * empty string means missing; doesn't allow for compound axes
 */
std::vector<std::string> listCoordinates(boost::shared_ptr<MetNoFimex::CDMReader> reader, std::vector<boost::shared_ptr<const MetNoFimex::CoordinateSystem> >* csList, std::string varName)
{
    std::vector<std::string> coords;
    std::vector<boost::shared_ptr<const CoordinateSystem> >::iterator varSysIt =
            find_if(csList->begin(), csList->end(), CompleteCoordinateSystemForComparator(varName));
    if (varSysIt != csList->end()) {
        if ((*varSysIt)->isSimpleSpatialGridded()) {
            std::vector<CoordinateSystem::ConstAxisPtr> axes;
            axes.push_back((*varSysIt)->getTimeAxis());
            axes.push_back((*varSysIt)->getGeoXAxis());
            axes.push_back((*varSysIt)->getGeoYAxis());
            axes.push_back((*varSysIt)->getGeoZAxis());
            axes.push_back((*varSysIt)->findAxisOfType(CoordinateAxis::ReferenceTime));

            std::vector<std::string> shape = reader->getCDM().getVariable(varName).getShape();
            std::set<std::string> shapeSet(shape.begin(), shape.end());
            for (int i = 0; i < axes.size(); i++) {
                if (axes.at(i).get() != 0) {
                    std::string dimName = axes.at(i)->getName();
                    size_t hasAxis = shapeSet.erase(dimName);
                    if (hasAxis) {
                        coords.push_back(dimName);
                    } else {
                        coords.push_back("");
                    }
                } else {
                    coords.push_back("");
                }
            }
            for (std::set<std::string>::iterator shapeIt = shapeSet.begin(); shapeIt != shapeSet.end(); ++shapeIt) {
                coords.push_back(*shapeIt);
            }
        }
    }
    return coords;
}

boost::shared_ptr<CDMReader> latLonInterpolatedReader(boost::shared_ptr<CDMReader> in, int method, const std::vector<double>& lonVals, const std::vector<double>& latVals) {
    CDMInterpolator* read = new CDMInterpolator(in);
    boost::shared_ptr<CDMReader> r = boost::shared_ptr<CDMReader>(read);
    read->changeProjection(method, lonVals, latVals);
    return r;
}

boost::shared_ptr<CDMReader> vectorAutoRotatedReader(boost::shared_ptr<CDMReader> in, int toLatLon) {
    CDMProcessor* read = new CDMProcessor(in);
    boost::shared_ptr<CDMReader> r = boost::shared_ptr<CDMReader>(read);
    read->rotateAllVectorsToLatLon(toLatLon != 0);
    return r;
}


double mifi_get_unique_forecast_reference_time(boost::shared_ptr<MetNoFimex::CDMReader> reader, const char* units)
{
    mifi_cdm_reader r(reader);
    return mifi_get_unique_forecast_reference_time(&r, units);
}


}  // namespace MetNoFimex



#include <string>


#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>
#include <stdexcept>
#include <stddef.h>


#include <algorithm>


#include <vector>


namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */

  template <class Type> struct traits_from_ptr {
    static SEXP from(Type *val, int owner = 0) {
      return SWIG_R_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static SEXP from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static SEXP from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type>
  inline SEXP from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline SEXP from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(SEXP obj, Type **val) {
      Type *p;
      int res = SWIG_R_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0);
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(SEXP obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(SEXP obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(SEXP obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(SEXP obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(SEXP obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
//	if (!PyErr_Occurred()) {
//	  %type_error(swig::type_name<Type>());
//	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(SEXP obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
//	if (!PyErr_Occurred()) {
//	  %type_error(swig::type_name<Type>());
//	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(SEXP obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
//	if (!PyErr_Occurred()) {
//	  %type_error(swig::type_name<Type>());
//	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(SEXP obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(SEXP obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(SEXP obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(SEXP obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


  namespace swig {
    template <>  struct traits<size_t > {
      typedef pointer_category category;
      static const char* type_name() { return"size_t"; }
    };
  }




      namespace swig {
	template <>  struct traits<std::vector<size_t, std::allocator< size_t > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "size_t" "," "std::allocator< size_t >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_size_t_Sg____nonzero__(std::vector< size_t > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< size_t >::size_type std_vector_Sl_size_t_Sg____len__(std::vector< size_t > const *self){
      return self->size();
    }

SWIGINTERNINLINE SEXP
SWIG_From_long  (long value)
{
	return Rf_ScalarInteger((int)value);
}


SWIGINTERNINLINE SEXP
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


#include <functional>
namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}

SWIGINTERN std::vector< size_t >::value_type std_vector_Sl_size_t_Sg__pop(std::vector< size_t > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<size_t,std::allocator< size_t > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE  int
SWIG_AsVal_long (SEXP obj, long *val)
{
   if (val) *val = Rf_asInteger(obj);
   return SWIG_OK;
}


SWIGINTERN int
SWIG_AsVal_int (SEXP obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}

SWIGINTERN std::vector< size_t,std::allocator< size_t > > *std_vector_Sl_size_t_Sg____getslice__(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____setslice__(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j,std::vector< size_t,std::allocator< size_t > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____delslice__(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_size_t_Sg____delitem__(std::vector< size_t > *self,std::vector< size_t >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< size_t >::value_type const &std_vector_Sl_size_t_Sg____getitem__(std::vector< size_t > const *self,std::vector< size_t >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

SWIGINTERNINLINE SEXP
SWIG_From_unsigned_SS_long  (unsigned long value)
{
	return Rf_ScalarInteger((int)value);
}


SWIGINTERNINLINE SEXP
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERNINLINE  int
SWIG_AsVal_unsigned_SS_long (SEXP obj, unsigned long *val)
{
   if (val) *val = Rf_asInteger(obj);
   return SWIG_OK;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (SEXP obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}

SWIGINTERN void std_vector_Sl_size_t_Sg____setitem__(std::vector< size_t > *self,std::vector< size_t >::difference_type i,std::vector< size_t >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_size_t_Sg__append(std::vector< size_t > *self,std::vector< size_t >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<double > {
      typedef pointer_category category;
      static const char* type_name() { return"double"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector< double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< double >::size_type std_vector_Sl_double_Sg____len__(std::vector< double > const *self){
      return self->size();
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__pop(std::vector< double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator< double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

SWIGINTERNINLINE SEXP
SWIG_From_double  (double value)
{
	return Rf_ScalarReal(value);
}

SWIGINTERN std::vector< double,std::allocator< double > > *std_vector_Sl_double_Sg____getslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j,std::vector< double,std::allocator< double > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem__(std::vector< double > *self,std::vector< double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< double >::value_type const &std_vector_Sl_double_Sg____getitem__(std::vector< double > const *self,std::vector< double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

SWIGINTERNINLINE  int
SWIG_AsVal_double (SEXP obj, double *val)
{
   if (val) *val = Rf_asReal(obj);
   return SWIG_OK;
}

SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector< double > *self,std::vector< double >::difference_type i,std::vector< double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector< double > *self,std::vector< double >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<std::string > {
      typedef pointer_category category;
      static const char* type_name() { return"std::string"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector< std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector< std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector< std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector< std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector< std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator< std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }

SWIGINTERN SEXP
SWIG_FromCharPtrAndSize(const char* carray, size_t size) 
{
  SEXP t, c;
  if (!carray) return R_NilValue;
/* See R internals document 1.10.  
   MkCharLen was introduced in 2.7.0.  Use that instead of hand
   creating vector.

   Starting in 2.8.0 creating strings via vectors was deprecated in
   order to allow for use of CHARSXP caches. */

  Rf_protect(t = Rf_allocVector(STRSXP, 1));
#if R_VERSION >=  R_Version(2,7,0)
  c = Rf_mkCharLen(carray, size);
#else
  c = Rf_allocVector(CHARSXP, size);
  strncpy((char *)CHAR(c), carray, size);
#endif
  SET_STRING_ELT(t, 0, c);
  Rf_unprotect(1);
  return t;
}


SWIGINTERNINLINE SEXP
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN std::vector< std::string,std::allocator< std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j,std::vector< std::string,std::allocator< std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem__(std::vector< std::string > *self,std::vector< std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem__(std::vector< std::string > const *self,std::vector< std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }

SWIGINTERN int
SWIG_AsCharPtrAndSize(SEXP obj, char** cptr, size_t* psize, int *alloc)
{
  if (cptr && Rf_isString(obj)) {
    char *cstr = const_cast< char * >(CHAR(STRING_ELT(obj, 0)));
    int len = strlen(cstr);

    if (alloc) {
      if (*alloc == SWIG_NEWOBJ) {
        *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        *cptr = cstr;
      }
    } else {
      *cptr = reinterpret_cast< char * >(malloc(len + 1));
      *cptr = strcpy(*cptr, cstr);
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (SEXP obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_R_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}

SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector< std::string > *self,std::vector< std::string >::difference_type i,std::vector< std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector< std::string > *self,std::vector< std::string >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERNINLINE SEXP 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}





SWIGINTERN int
SWIG_AsVal_bool (SEXP obj, bool *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res)) {    
    if (val) *val = v ? true : false;
    return res;
  }  
  return SWIG_TypeError;
}

SWIGINTERN std::vector< double,std::allocator< double > > MetNoFimex_CDMReader_getSliceVecInUnit__SWIG_0(MetNoFimex::CDMReader *self,std::string varName,MetNoFimex::SliceBuilder sb,std::string units=""){
         MetNoFimex::DataPtr d;
         if (units != "") {
           d = self->getScaledDataSliceInUnit(varName, units, sb);
         } else {
           d = self->getScaledDataSlice(varName, sb);
         }
         std::vector<double> out; // = new std::vector<double>();
         if (d.get() != 0) {
            boost::shared_array<double> dAry = d->asDouble();
            out.assign(&dAry[0], &dAry[0]+d->size());
         }
         return out;
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT SEXP
R_swig_IntVector___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___nonzero__" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (bool)std_vector_Sl_size_t_Sg____nonzero__((std::vector< size_t > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t >::size_type result;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___len__" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = std_vector_Sl_size_t_Sg____len__((std::vector< size_t > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t >::value_type result;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  try {
    result = std_vector_Sl_size_t_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getslice__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getslice__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___getslice__" "', argument " "3"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  try {
    result = (std::vector< size_t,std::allocator< size_t > > *)std_vector_Sl_size_t_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, R_SWIG_OWNER |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  std::vector< size_t,std::allocator< size_t > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setslice__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setslice__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setslice__" "', argument " "3"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  {
    std::vector<size_t,std::allocator< size_t > > *ptr = (std::vector<size_t,std::allocator< size_t > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector___setslice__" "', argument " "4"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_size_t_Sg____setslice__(arg1,arg2,arg3,(std::vector< size_t,std::allocator< size_t > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delslice__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delslice__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___delslice__" "', argument " "3"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< size_t >::difference_type >(val3);
  try {
    std_vector_Sl_size_t_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector___delitem__ ( SEXP self, SEXP i)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___delitem__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___delitem__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  try {
    std_vector_Sl_size_t_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< size_t >::value_type *result = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___getitem__" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___getitem__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  try {
    result = (std::vector< size_t >::value_type *) &std_vector_Sl_size_t_Sg____getitem__((std::vector< size_t > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_From_size_t(static_cast< size_t >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::difference_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector___setitem__" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector___setitem__" "', argument " "2"" of type '" "std::vector< size_t >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::difference_type >(val2);
  ecode3 = SWIG_AsVal_size_t(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector___setitem__" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_size_t_Sg____setitem__(arg1,arg2,(size_t const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_append ( SEXP self, SEXP x)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_append" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_append" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_size_t_Sg__append(arg1,(size_t const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_IntVector__SWIG_0 ( )
{
  std::vector< size_t > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< size_t > *)new std::vector< size_t >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_IntVector__SWIG_1 ( SEXP s_arg1)
{
  std::vector< size_t > *result = 0 ;
  std::vector< size_t > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector<size_t,std::allocator< size_t > > *ptr = (std::vector<size_t,std::allocator< size_t > > *)0;
    res1 = swig::asptr(s_arg1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< size_t > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< size_t > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< size_t > *)new std::vector< size_t >((std::vector< size_t > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, R_SWIG_OWNER |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_empty" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (bool)((std::vector< size_t > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t >::size_type result;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_size" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = ((std::vector< size_t > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_clear ( SEXP self)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_clear" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_swap ( SEXP self, SEXP v)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_swap" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< size_t > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVector_swap" "', argument " "2"" of type '" "std::vector< size_t > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< size_t > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< size_t > > result;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_get_allocator" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = ((std::vector< size_t > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< size_t >::allocator_type(static_cast< const std::vector< size_t >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_size_t_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_IntVector__SWIG_2 ( SEXP size)
{
  std::vector< size_t > *result = 0 ;
  std::vector< size_t >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< size_t >::size_type >(val1);
  result = (std::vector< size_t > *)new std::vector< size_t >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_pop_back ( SEXP self)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_pop_back" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_IntVector__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< size_t > *result = 0 ;
  std::vector< size_t >::size_type arg1 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IntVector" "', argument " "1"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg1 = static_cast< std::vector< size_t >::size_type >(val1);
  ecode2 = SWIG_AsVal_size_t(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IntVector" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< size_t > *)new std::vector< size_t >(arg1,(std::vector< size_t >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, R_SWIG_OWNER |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_push_back ( SEXP self, SEXP x)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< size_t >::value_type temp2 ;
  size_t val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_push_back" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_push_back" "', argument " "2"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp2 = static_cast< std::vector< size_t >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< size_t >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t >::value_type *result = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_front" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (std::vector< size_t >::value_type *) &((std::vector< size_t > const *)arg1)->front();
  r_ans = SWIG_From_size_t(static_cast< size_t >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t >::value_type *result = 0 ;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_back" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = (std::vector< size_t >::value_type *) &((std::vector< size_t > const *)arg1)->back();
  r_ans = SWIG_From_size_t(static_cast< size_t >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_assign" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_assign" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_assign" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< size_t >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  std::vector< size_t >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< size_t >::value_type temp3 ;
  size_t val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_resize" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_resize" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  ecode3 = SWIG_AsVal_size_t(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVector_resize" "', argument " "3"" of type '" "std::vector< size_t >::value_type""'");
  } 
  temp3 = static_cast< std::vector< size_t >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< size_t >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_reserve ( SEXP self, SEXP n)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  std::vector< size_t >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_reserve" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVector_reserve" "', argument " "2"" of type '" "std::vector< size_t >::size_type""'");
  } 
  arg2 = static_cast< std::vector< size_t >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_IntVector_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t >::size_type result;
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVector_capacity" "', argument " "1"" of type '" "std::vector< size_t > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  result = ((std::vector< size_t > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_IntVector ( SEXP self)
{
  std::vector< size_t > *arg1 = (std::vector< size_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_size_t_std__allocatorT_size_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVector" "', argument " "1"" of type '" "std::vector< size_t > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< size_t > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___nonzero__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector< double > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::size_type result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___len__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = std_vector_Sl_double_Sg____len__((std::vector< double > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::value_type result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  try {
    result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_From_double(static_cast< double >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< double,std::allocator< double > > *result = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___getslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    result = (std::vector< double,std::allocator< double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, R_SWIG_OWNER |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector___setslice__" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delslice__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delslice__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___delslice__" "', argument " "3"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< double >::difference_type >(val3);
  try {
    std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector___delitem__ ( SEXP self, SEXP i)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___delitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___delitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    std_vector_Sl_double_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< double >::value_type *result = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___getitem__" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___getitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg____getitem__((std::vector< double > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_From_double(static_cast< double >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::difference_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector___setitem__" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector___setitem__" "', argument " "2"" of type '" "std::vector< double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector___setitem__" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  try {
    std_vector_Sl_double_Sg____setitem__(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_append ( SEXP self, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_append" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_append" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_DoubleVector__SWIG_0 ( )
{
  std::vector< double > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< double > *)new std::vector< double >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_DoubleVector__SWIG_1 ( SEXP s_arg1)
{
  std::vector< double > *result = 0 ;
  std::vector< double > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res1 = swig::asptr(s_arg1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< double > *)new std::vector< double >((std::vector< double > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, R_SWIG_OWNER |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_empty" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (bool)((std::vector< double > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::size_type result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_size" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_clear ( SEXP self)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_clear" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_swap ( SEXP self, SEXP v)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_swap" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DoubleVector_swap" "', argument " "2"" of type '" "std::vector< double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< double > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< double > > result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_get_allocator" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< double >::allocator_type(static_cast< const std::vector< double >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_double_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_DoubleVector__SWIG_2 ( SEXP size)
{
  std::vector< double > *result = 0 ;
  std::vector< double >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  result = (std::vector< double > *)new std::vector< double >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_pop_back ( SEXP self)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_pop_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_DoubleVector__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< double > *result = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleVector" "', argument " "1"" of type '" "std::vector< double >::size_type""'");
  } 
  arg1 = static_cast< std::vector< double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(value, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DoubleVector" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, R_SWIG_OWNER |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_push_back ( SEXP self, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_push_back" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(x, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_push_back" "', argument " "2"" of type '" "std::vector< double >::value_type""'");
  } 
  temp2 = static_cast< std::vector< double >::value_type >(val2);
  arg2 = &temp2;
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::value_type *result = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_front" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->front();
  r_ans = SWIG_From_double(static_cast< double >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::value_type *result = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_back" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = (std::vector< double >::value_type *) &((std::vector< double > const *)arg1)->back();
  r_ans = SWIG_From_double(static_cast< double >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_assign" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_assign" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_assign" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->assign(arg2,(std::vector< double >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_resize" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_resize" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(x, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DoubleVector_resize" "', argument " "3"" of type '" "std::vector< double >::value_type""'");
  } 
  temp3 = static_cast< std::vector< double >::value_type >(val3);
  arg3 = &temp3;
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_reserve ( SEXP self, SEXP n)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_reserve" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleVector_reserve" "', argument " "2"" of type '" "std::vector< double >::size_type""'");
  } 
  arg2 = static_cast< std::vector< double >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_DoubleVector_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< double >::size_type result;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleVector_capacity" "', argument " "1"" of type '" "std::vector< double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  result = ((std::vector< double > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_DoubleVector ( SEXP self)
{
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_double_std__allocatorT_double_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleVector" "', argument " "1"" of type '" "std::vector< double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< double > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector___nonzero__ ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___nonzero__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector< std::string > const *)arg1);
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector___len__ ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::size_type result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___len__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = std_vector_Sl_std_string_Sg____len__((std::vector< std::string > const *)arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_pop ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::value_type result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  try {
    result = std_vector_Sl_std_string_Sg__pop(arg1);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_From_std_string(static_cast< std::string >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector___getslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::string,std::allocator< std::string > > *result = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___getslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    result = (std::vector< std::string,std::allocator< std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, R_SWIG_OWNER |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector___setslice__ ( SEXP self, SEXP i, SEXP j, SEXP v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___setslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(v, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setslice__" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  catch(std::invalid_argument &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector___delslice__ ( SEXP self, SEXP i, SEXP j)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delslice__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delslice__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(j, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StringVector___delslice__" "', argument " "3"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector< std::string >::difference_type >(val3);
  try {
    std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector___delitem__ ( SEXP self, SEXP i)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___delitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___delitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    std_vector_Sl_std_string_Sg____delitem__(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector___getitem__ ( SEXP self, SEXP i, SEXP s_swig_copy)
{
  std::vector< std::string >::value_type *result = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___getitem__" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___getitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg____getitem__((std::vector< std::string > const *)arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector___setitem__ ( SEXP self, SEXP i, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::difference_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector___setitem__" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(i, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector___setitem__" "', argument " "2"" of type '" "std::vector< std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector___setitem__" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  try {
    std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_append ( SEXP self, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_append" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_append" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_StringVector__SWIG_0 ( )
{
  std::vector< std::string > *result = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_StringVector__SWIG_1 ( SEXP s_arg1)
{
  std::vector< std::string > *result = 0 ;
  std::vector< std::string > *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(s_arg1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, R_SWIG_OWNER |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_empty ( SEXP self, SEXP s_swig_copy)
{
  bool result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_empty" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  r_ans = Rf_ScalarLogical(result);
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_size ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::size_type result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_size" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->size();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_clear ( SEXP self)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_clear" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->clear();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_swap ( SEXP self, SEXP v)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_swap" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  res2 = SWIG_R_ConvertPtr(v, &argp2, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_swap" "', argument " "2"" of type '" "std::vector< std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< std::string > * >(argp2);
  (arg1)->swap(*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_get_allocator ( SEXP self, SEXP s_swig_copy)
{
  SwigValueWrapper< std::allocator< std::string > > result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_get_allocator" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->get_allocator();
  r_ans = SWIG_R_NewPointerObj((new std::vector< std::string >::allocator_type(static_cast< const std::vector< std::string >::allocator_type& >(result))), SWIGTYPE_p_std__allocatorT_std__string_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_StringVector__SWIG_2 ( SEXP size)
{
  std::vector< std::string > *result = 0 ;
  std::vector< std::string >::size_type arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, R_SWIG_OWNER |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_pop_back ( SEXP self)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_pop_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  (arg1)->pop_back();
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_resize__SWIG_0 ( SEXP self, SEXP new_size)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->resize(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_StringVector__SWIG_3 ( SEXP size, SEXP value)
{
  std::vector< std::string > *result = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  ecode1 = SWIG_AsVal_int(size, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_StringVector" "', argument " "1"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector< std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(value, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StringVector" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1,(std::vector< std::string >::value_type const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, R_SWIG_OWNER |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_push_back ( SEXP self, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_push_back" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_push_back" "', argument " "2"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_front ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::value_type *result = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_front" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->front();
  r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_back ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::value_type *result = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_back" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = (std::vector< std::string >::value_type *) &((std::vector< std::string > const *)arg1)->back();
  r_ans = SWIG_From_std_string(static_cast< std::string >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_assign ( SEXP self, SEXP n, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_assign" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_assign" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_assign" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->assign(arg2,(std::vector< std::string >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_resize__SWIG_1 ( SEXP self, SEXP new_size, SEXP x)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_resize" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(new_size, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_resize" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(x, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "StringVector_resize" "', argument " "3"" of type '" "std::vector< std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  (arg1)->resize(arg2,(std::vector< std::string >::value_type const &)*arg3);
  r_ans = R_NilValue;
  
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_reserve ( SEXP self, SEXP n)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_reserve" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  ecode2 = SWIG_AsVal_int(n, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringVector_reserve" "', argument " "2"" of type '" "std::vector< std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector< std::string >::size_type >(val2);
  (arg1)->reserve(arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_StringVector_capacity ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string >::size_type result;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringVector_capacity" "', argument " "1"" of type '" "std::vector< std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  result = ((std::vector< std::string > const *)arg1)->capacity();
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_StringVector ( SEXP self)
{
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_std__vectorT_std__string_std__allocatorT_std__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringVector" "', argument " "1"" of type '" "std::vector< std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector< std::string > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_mifi_cdm_reader ( SEXP reader)
{
  mifi_cdm_reader *result = 0 ;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mifi_cdm_reader" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mifi_cdm_reader" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  result = (mifi_cdm_reader *)new mifi_cdm_reader(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mifi_cdm_reader, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_mifi_cdm_reader_get ( SEXP self, SEXP s_swig_copy)
{
  boost::shared_ptr< MetNoFimex::CDMReader > result;
  mifi_cdm_reader *arg1 = (mifi_cdm_reader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_mifi_cdm_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mifi_cdm_reader_get" "', argument " "1"" of type '" "mifi_cdm_reader *""'"); 
  }
  arg1 = reinterpret_cast< mifi_cdm_reader * >(argp1);
  result = (arg1)->get();
  r_ans = SWIG_R_NewPointerObj((new boost::shared_ptr< MetNoFimex::CDMReader >(static_cast< const boost::shared_ptr< MetNoFimex::CDMReader >& >(result))), SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_mifi_cdm_reader ( SEXP self)
{
  mifi_cdm_reader *arg1 = (mifi_cdm_reader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_mifi_cdm_reader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mifi_cdm_reader" "', argument " "1"" of type '" "mifi_cdm_reader *""'"); 
  }
  arg1 = reinterpret_cast< mifi_cdm_reader * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_mifi_slicebuilder ( SEXP sb)
{
  mifi_slicebuilder *result = 0 ;
  SwigValueWrapper< MetNoFimex::SliceBuilder > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(sb, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_mifi_slicebuilder" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_mifi_slicebuilder" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder""'");
    } else {
      arg1 = *(reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1));
    }
  }
  result = (mifi_slicebuilder *)new mifi_slicebuilder(arg1);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_mifi_slicebuilder, R_SWIG_OWNER |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_mifi_slicebuilder_sb__set ( SEXP self, SEXP s_sb_)
{
  mifi_slicebuilder *arg1 = (mifi_slicebuilder *) 0 ;
  MetNoFimex::SliceBuilder *arg2 = (MetNoFimex::SliceBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_mifi_slicebuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mifi_slicebuilder_sb__set" "', argument " "1"" of type '" "mifi_slicebuilder *""'"); 
  }
  arg1 = reinterpret_cast< mifi_slicebuilder * >(argp1);
  res2 = SWIG_R_ConvertPtr(s_sb_, &argp2, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mifi_slicebuilder_sb__set" "', argument " "2"" of type '" "MetNoFimex::SliceBuilder *""'"); 
  }
  arg2 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp2);
  if (arg1) (arg1)->sb_ = *arg2;
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_mifi_slicebuilder_sb__get ( SEXP self)
{
  MetNoFimex::SliceBuilder *result = 0 ;
  mifi_slicebuilder *arg1 = (mifi_slicebuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_mifi_slicebuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mifi_slicebuilder_sb__get" "', argument " "1"" of type '" "mifi_slicebuilder *""'"); 
  }
  arg1 = reinterpret_cast< mifi_slicebuilder * >(argp1);
  result = (MetNoFimex::SliceBuilder *)& ((arg1)->sb_);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__SliceBuilder, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_mifi_slicebuilder ( SEXP self)
{
  mifi_slicebuilder *arg1 = (mifi_slicebuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_mifi_slicebuilder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_mifi_slicebuilder" "', argument " "1"" of type '" "mifi_slicebuilder *""'"); 
  }
  arg1 = reinterpret_cast< mifi_slicebuilder * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_mifi_get_variable_number ( SEXP reader, SEXP s_swig_copy)
{
  size_t result;
  mifi_cdm_reader *arg1 = (mifi_cdm_reader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_mifi_cdm_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mifi_get_variable_number" "', argument " "1"" of type '" "mifi_cdm_reader *""'"); 
  }
  arg1 = reinterpret_cast< mifi_cdm_reader * >(argp1);
  result = mifi_get_variable_number(arg1);
  r_ans = SWIG_From_int(static_cast< int >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_mifi_get_variable_name ( SEXP reader, SEXP pos)
{
  char *result = 0 ;
  mifi_cdm_reader *arg1 = (mifi_cdm_reader *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_mifi_cdm_reader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mifi_get_variable_name" "', argument " "1"" of type '" "mifi_cdm_reader *""'"); 
  }
  arg1 = reinterpret_cast< mifi_cdm_reader * >(argp1);
  ecode2 = SWIG_AsVal_int(pos, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "mifi_get_variable_name" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  result = (char *)mifi_get_variable_name(arg1,arg2);
  r_ans = SWIG_FromCharPtr((const char *)result);
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_mifi_get_unique_forecast_reference_time ( SEXP reader, SEXP units, SEXP s_swig_copy)
{
  double result;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  char *arg2 = (char *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "mifi_get_unique_forecast_reference_time" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "mifi_get_unique_forecast_reference_time" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  res2 = SWIG_AsCharPtrAndSize(units, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "mifi_get_unique_forecast_reference_time" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (double)mifi_get_unique_forecast_reference_time(arg1,(char const *)arg2);
  r_ans = SWIG_From_double(static_cast< double >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_SliceBuilder__SWIG_0 ( SEXP cdm, SEXP varName, SEXP setUnlimited)
{
  MetNoFimex::SliceBuilder *result = 0 ;
  MetNoFimex::CDM *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(cdm, &argp1, SWIGTYPE_p_MetNoFimex__CDM,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SliceBuilder" "', argument " "1"" of type '" "MetNoFimex::CDM const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceBuilder" "', argument " "1"" of type '" "MetNoFimex::CDM const &""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::CDM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(varName, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SliceBuilder" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceBuilder" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  arg3 = LOGICAL(setUnlimited)[0] ? true : false;
  result = (MetNoFimex::SliceBuilder *)new MetNoFimex::SliceBuilder((MetNoFimex::CDM const &)*arg1,(std::string const &)*arg2,arg3);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__SliceBuilder, R_SWIG_OWNER |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_SliceBuilder__SWIG_1 ( SEXP cdm, SEXP varName)
{
  MetNoFimex::SliceBuilder *result = 0 ;
  MetNoFimex::CDM *arg1 = 0 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(cdm, &argp1, SWIGTYPE_p_MetNoFimex__CDM,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SliceBuilder" "', argument " "1"" of type '" "MetNoFimex::CDM const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceBuilder" "', argument " "1"" of type '" "MetNoFimex::CDM const &""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::CDM * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(varName, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SliceBuilder" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceBuilder" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (MetNoFimex::SliceBuilder *)new MetNoFimex::SliceBuilder((MetNoFimex::CDM const &)*arg1,(std::string const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__SliceBuilder, R_SWIG_OWNER |  0 );
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_SliceBuilder__SWIG_2 ( SEXP dimNames, SEXP dimSize)
{
  MetNoFimex::SliceBuilder *result = 0 ;
  std::vector< std::string,std::allocator< std::string > > *arg1 = 0 ;
  std::vector< size_t,std::allocator< size_t > > *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res1 = swig::asptr(dimNames, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SliceBuilder" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceBuilder" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::vector<size_t,std::allocator< size_t > > *ptr = (std::vector<size_t,std::allocator< size_t > > *)0;
    res2 = swig::asptr(dimSize, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SliceBuilder" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SliceBuilder" "', argument " "2"" of type '" "std::vector< size_t,std::allocator< size_t > > const &""'"); 
    }
    arg2 = ptr;
  }
  result = (MetNoFimex::SliceBuilder *)new MetNoFimex::SliceBuilder((std::vector< std::string,std::allocator< std::string > > const &)*arg1,(std::vector< size_t,std::allocator< size_t > > const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__SliceBuilder, R_SWIG_OWNER |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_SliceBuilder ( SEXP self)
{
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SliceBuilder" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_setStartAndSize__SWIG_0 ( SEXP self, SEXP dimName, SEXP start, SEXP size)
{
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  std::string *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_setStartAndSize" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(dimName, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceBuilder_setStartAndSize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SliceBuilder_setStartAndSize" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  ecode3 = SWIG_AsVal_int(start, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SliceBuilder_setStartAndSize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(size, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SliceBuilder_setStartAndSize" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  (arg1)->setStartAndSize((std::string const &)*arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_setStartAndSize__SWIG_1 ( SEXP self, SEXP axis, SEXP start, SEXP size)
{
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  boost::shared_ptr< MetNoFimex::CoordinateAxis const > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_setStartAndSize" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  res2 = SWIG_R_ConvertPtr(axis, &argp2, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceBuilder_setStartAndSize" "', argument " "2"" of type '" "boost::shared_ptr< MetNoFimex::CoordinateAxis const > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SliceBuilder_setStartAndSize" "', argument " "2"" of type '" "boost::shared_ptr< MetNoFimex::CoordinateAxis const > const &""'"); 
  }
  arg2 = reinterpret_cast< boost::shared_ptr< MetNoFimex::CoordinateAxis const > * >(argp2);
  ecode3 = SWIG_AsVal_int(start, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SliceBuilder_setStartAndSize" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  ecode4 = SWIG_AsVal_int(size, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SliceBuilder_setStartAndSize" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  (arg1)->setStartAndSize((boost::shared_ptr< MetNoFimex::CoordinateAxis const > const &)*arg2,arg3,arg4);
  r_ans = R_NilValue;
  
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_setAll__SWIG_0 ( SEXP self, SEXP dimName)
{
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_setAll" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(dimName, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceBuilder_setAll" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SliceBuilder_setAll" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  (arg1)->setAll((std::string const &)*arg2);
  r_ans = R_NilValue;
  
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_setAll__SWIG_1 ( SEXP self, SEXP axis)
{
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  boost::shared_ptr< MetNoFimex::CoordinateAxis const > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_setAll" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  res2 = SWIG_R_ConvertPtr(axis, &argp2, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SliceBuilder_setAll" "', argument " "2"" of type '" "boost::shared_ptr< MetNoFimex::CoordinateAxis const > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SliceBuilder_setAll" "', argument " "2"" of type '" "boost::shared_ptr< MetNoFimex::CoordinateAxis const > const &""'"); 
  }
  arg2 = reinterpret_cast< boost::shared_ptr< MetNoFimex::CoordinateAxis const > * >(argp2);
  (arg1)->setAll((boost::shared_ptr< MetNoFimex::CoordinateAxis const > const &)*arg2);
  r_ans = R_NilValue;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_getDimensionStartPositions ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_getDimensionStartPositions" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder const *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *) &((MetNoFimex::SliceBuilder const *)arg1)->getDimensionStartPositions();
  r_ans = swig::from(static_cast< std::vector<size_t,std::allocator< size_t > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_getDimensionSizes ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_getDimensionSizes" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder const *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *) &((MetNoFimex::SliceBuilder const *)arg1)->getDimensionSizes();
  r_ans = swig::from(static_cast< std::vector<size_t,std::allocator< size_t > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_getDimensionNames ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > result;
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_getDimensionNames" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder const *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  result = ((MetNoFimex::SliceBuilder const *)arg1)->getDimensionNames();
  r_ans = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_getUnsetDimensionNames ( SEXP self, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > result;
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_getUnsetDimensionNames" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder const *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  result = ((MetNoFimex::SliceBuilder const *)arg1)->getUnsetDimensionNames();
  r_ans = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_SliceBuilder_getMaxDimensionSizes ( SEXP self, SEXP s_swig_copy)
{
  std::vector< size_t,std::allocator< size_t > > *result = 0 ;
  MetNoFimex::SliceBuilder *arg1 = (MetNoFimex::SliceBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__SliceBuilder, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SliceBuilder_getMaxDimensionSizes" "', argument " "1"" of type '" "MetNoFimex::SliceBuilder const *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp1);
  result = (std::vector< size_t,std::allocator< size_t > > *) &((MetNoFimex::SliceBuilder const *)arg1)->getMaxDimensionSizes();
  r_ans = swig::from(static_cast< std::vector<size_t,std::allocator< size_t > > >(*result));
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig___lshift__ ( SEXP os, SEXP sb, SEXP s_swig_copy)
{
  std::ostream *result = 0 ;
  std::ostream *arg1 = 0 ;
  MetNoFimex::SliceBuilder *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(os, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_R_ConvertPtr(sb, &argp2, SWIGTYPE_p_MetNoFimex__SliceBuilder,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "MetNoFimex::SliceBuilder const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "MetNoFimex::SliceBuilder const &""'"); 
  }
  arg2 = reinterpret_cast< MetNoFimex::SliceBuilder * >(argp2);
  result = (std::ostream *) &MetNoFimex::operator <<(*arg1,(MetNoFimex::SliceBuilder const &)*arg2);
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, R_SWIG_EXTERNAL |  0 );
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_listCoordinateSystems ( SEXP reader, SEXP s_swig_copy)
{
  SwigValueWrapper< std::vector< boost::shared_ptr< MetNoFimex::CoordinateSystem const >,std::allocator< boost::shared_ptr< MetNoFimex::CoordinateSystem const > > > > result;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listCoordinateSystems" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "listCoordinateSystems" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  result = MetNoFimex::listCoordinateSystems(arg1);
  r_ans = SWIG_R_NewPointerObj((new std::vector< boost::shared_ptr< MetNoFimex::CoordinateSystem const >,std::allocator< boost::shared_ptr< MetNoFimex::CoordinateSystem const > > >(static_cast< const std::vector< boost::shared_ptr< MetNoFimex::CoordinateSystem const >,std::allocator< boost::shared_ptr< MetNoFimex::CoordinateSystem const > > >& >(result))), SWIGTYPE_p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t, SWIG_POINTER_OWN |  0 );
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_listCoordinates ( SEXP reader, SEXP csList, SEXP varName, SEXP s_swig_copy)
{
  std::vector< std::string,std::allocator< std::string > > result;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  std::vector< boost::shared_ptr< MetNoFimex::CoordinateSystem const >,std::allocator< boost::shared_ptr< MetNoFimex::CoordinateSystem const > > > *arg2 = (std::vector< boost::shared_ptr< MetNoFimex::CoordinateSystem const >,std::allocator< boost::shared_ptr< MetNoFimex::CoordinateSystem const > > > *) 0 ;
  std::string arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "listCoordinates" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "listCoordinates" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  res2 = SWIG_R_ConvertPtr(csList, &argp2, SWIGTYPE_p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "listCoordinates" "', argument " "2"" of type '" "std::vector< boost::shared_ptr< MetNoFimex::CoordinateSystem const >,std::allocator< boost::shared_ptr< MetNoFimex::CoordinateSystem const > > > *""'"); 
  }
  arg2 = reinterpret_cast< std::vector< boost::shared_ptr< MetNoFimex::CoordinateSystem const >,std::allocator< boost::shared_ptr< MetNoFimex::CoordinateSystem const > > > * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(varName, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "listCoordinates" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = MetNoFimex::listCoordinates(arg1,arg2,arg3);
  r_ans = swig::from(static_cast< std::vector<std::string,std::allocator< std::string > > >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_latLonInterpolatedReader ( SEXP s_arg1, SEXP method, SEXP lonVals, SEXP latVals, SEXP s_swig_copy)
{
  boost::shared_ptr< MetNoFimex::CDMReader > result;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  int arg2 ;
  std::vector< double,std::allocator< double > > *arg3 = 0 ;
  std::vector< double,std::allocator< double > > *arg4 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "latLonInterpolatedReader" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "latLonInterpolatedReader" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  arg2 = static_cast< int >(INTEGER(method)[0]);
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res3 = swig::asptr(lonVals, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "latLonInterpolatedReader" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "latLonInterpolatedReader" "', argument " "3"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::vector<double,std::allocator< double > > *ptr = (std::vector<double,std::allocator< double > > *)0;
    res4 = swig::asptr(latVals, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "latLonInterpolatedReader" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "latLonInterpolatedReader" "', argument " "4"" of type '" "std::vector< double,std::allocator< double > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    result = MetNoFimex::latLonInterpolatedReader(arg1,arg2,(std::vector< double,std::allocator< double > > const &)*arg3,(std::vector< double,std::allocator< double > > const &)*arg4);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj((new boost::shared_ptr< MetNoFimex::CDMReader >(static_cast< const boost::shared_ptr< MetNoFimex::CDMReader >& >(result))), SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, SWIG_POINTER_OWN |  0 );
  
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_vectorAutoRotatedReader ( SEXP s_arg1, SEXP toLatLon, SEXP s_swig_copy)
{
  boost::shared_ptr< MetNoFimex::CDMReader > result;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  int arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(s_arg1, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorAutoRotatedReader" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorAutoRotatedReader" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  arg2 = static_cast< int >(INTEGER(toLatLon)[0]);
  try {
    result = MetNoFimex::vectorAutoRotatedReader(arg1,arg2);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj((new boost::shared_ptr< MetNoFimex::CDMReader >(static_cast< const boost::shared_ptr< MetNoFimex::CDMReader >& >(result))), SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, SWIG_POINTER_OWN |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_CDM ( SEXP self)
{
  MetNoFimex::CDM *arg1 = (MetNoFimex::CDM *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__CDM, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CDM" "', argument " "1"" of type '" "MetNoFimex::CDM *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::CDM * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CDMReader_getCDM ( SEXP self, SEXP s_swig_copy)
{
  MetNoFimex::CDM *result = 0 ;
  MetNoFimex::CDMReader *arg1 = (MetNoFimex::CDMReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__CDMReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDMReader_getCDM" "', argument " "1"" of type '" "MetNoFimex::CDMReader const *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::CDMReader * >(argp1);
  result = (MetNoFimex::CDM *) &((MetNoFimex::CDMReader const *)arg1)->getCDM();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__CDM, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CDMReader_getSliceVecInUnit__SWIG_0 ( SEXP self, SEXP varName, SEXP sb, SEXP units, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > result;
  MetNoFimex::CDMReader *arg1 = (MetNoFimex::CDMReader *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< MetNoFimex::SliceBuilder > arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__CDMReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDMReader_getSliceVecInUnit" "', argument " "1"" of type '" "MetNoFimex::CDMReader *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::CDMReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(varName, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMReader_getSliceVecInUnit" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res3 = SWIG_R_ConvertPtr(sb, &argp3, SWIGTYPE_p_MetNoFimex__SliceBuilder,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CDMReader_getSliceVecInUnit" "', argument " "3"" of type '" "MetNoFimex::SliceBuilder""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDMReader_getSliceVecInUnit" "', argument " "3"" of type '" "MetNoFimex::SliceBuilder""'");
    } else {
      arg3 = *(reinterpret_cast< MetNoFimex::SliceBuilder * >(argp3));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(units, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMReader_getSliceVecInUnit" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    result = MetNoFimex_CDMReader_getSliceVecInUnit__SWIG_0(arg1,arg2,arg3,arg4);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CDMReader_getSliceVecInUnit__SWIG_1 ( SEXP self, SEXP varName, SEXP sb, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > result;
  MetNoFimex::CDMReader *arg1 = (MetNoFimex::CDMReader *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< MetNoFimex::SliceBuilder > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__CDMReader, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CDMReader_getSliceVecInUnit" "', argument " "1"" of type '" "MetNoFimex::CDMReader *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::CDMReader * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(varName, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMReader_getSliceVecInUnit" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res3 = SWIG_R_ConvertPtr(sb, &argp3, SWIGTYPE_p_MetNoFimex__SliceBuilder,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "CDMReader_getSliceVecInUnit" "', argument " "3"" of type '" "MetNoFimex::SliceBuilder""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDMReader_getSliceVecInUnit" "', argument " "3"" of type '" "MetNoFimex::SliceBuilder""'");
    } else {
      arg3 = *(reinterpret_cast< MetNoFimex::SliceBuilder * >(argp3));
    }
  }
  try {
    result = MetNoFimex_CDMReader_getSliceVecInUnit__SWIG_0(arg1,arg2,arg3);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_CDMReader ( SEXP self)
{
  MetNoFimex::CDMReader *arg1 = (MetNoFimex::CDMReader *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__CDMReader, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CDMReader" "', argument " "1"" of type '" "MetNoFimex::CDMReader *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::CDMReader * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_boost__shared_ptrCDMReader___deref__ ( SEXP self)
{
  MetNoFimex::CDMReader *result = 0 ;
  boost::shared_ptr< MetNoFimex::CDMReader > *arg1 = (boost::shared_ptr< MetNoFimex::CDMReader > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boost__shared_ptrCDMReader___deref__" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1);
  result = (MetNoFimex::CDMReader *)((boost::shared_ptr< MetNoFimex::CDMReader > const *)arg1)->operator ->();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__CDMReader, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_boost__shared_ptrCDMReader ( SEXP self)
{
  boost::shared_ptr< MetNoFimex::CDMReader > *arg1 = (boost::shared_ptr< MetNoFimex::CDMReader > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_boost__shared_ptrCDMReader" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_boost__shared_ptrCDMReader_getCDM ( SEXP self, SEXP s_swig_copy)
{
  MetNoFimex::CDM *result = 0 ;
  boost::shared_ptr< MetNoFimex::CDMReader > *arg1 = (boost::shared_ptr< MetNoFimex::CDMReader > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boost__shared_ptrCDMReader_getCDM" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader > const *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1);
  result = (MetNoFimex::CDM *) &(*arg1)->getCDM();
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__CDM, R_SWIG_EXTERNAL |  0 );
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_boost__shared_ptrCDMReader_getSliceVecInUnit__SWIG_0 ( SEXP self, SEXP varName, SEXP sb, SEXP units, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > result;
  boost::shared_ptr< MetNoFimex::CDMReader > *arg1 = (boost::shared_ptr< MetNoFimex::CDMReader > *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< MetNoFimex::SliceBuilder > arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(varName, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res3 = SWIG_R_ConvertPtr(sb, &argp3, SWIGTYPE_p_MetNoFimex__SliceBuilder,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "3"" of type '" "MetNoFimex::SliceBuilder""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "3"" of type '" "MetNoFimex::SliceBuilder""'");
    } else {
      arg3 = *(reinterpret_cast< MetNoFimex::SliceBuilder * >(argp3));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(units, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    result = MetNoFimex_CDMReader_getSliceVecInUnit__SWIG_0((MetNoFimex::CDMReader*)(arg1)->operator ->(),arg2,arg3,arg4);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_boost__shared_ptrCDMReader_getSliceVecInUnit__SWIG_1 ( SEXP self, SEXP varName, SEXP sb, SEXP s_swig_copy)
{
  std::vector< double,std::allocator< double > > result;
  boost::shared_ptr< MetNoFimex::CDMReader > *arg1 = (boost::shared_ptr< MetNoFimex::CDMReader > *) 0 ;
  std::string arg2 ;
  SwigValueWrapper< MetNoFimex::SliceBuilder > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader > *""'"); 
  }
  arg1 = reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(varName, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res3 = SWIG_R_ConvertPtr(sb, &argp3, SWIGTYPE_p_MetNoFimex__SliceBuilder,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "3"" of type '" "MetNoFimex::SliceBuilder""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "boost__shared_ptrCDMReader_getSliceVecInUnit" "', argument " "3"" of type '" "MetNoFimex::SliceBuilder""'");
    } else {
      arg3 = *(reinterpret_cast< MetNoFimex::SliceBuilder * >(argp3));
    }
  }
  try {
    result = MetNoFimex_CDMReader_getSliceVecInUnit__SWIG_0((MetNoFimex::CDMReader*)(arg1)->operator ->(),arg2,arg3);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = swig::from(static_cast< std::vector<double,std::allocator< double > > >(result));
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CDMFileReaderFactory_create__SWIG_0 ( SEXP fileType, SEXP filename, SEXP configFile, SEXP s_args, SEXP s_swig_copy)
{
  boost::shared_ptr< MetNoFimex::CDMReader > result;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector< std::string,std::allocator< std::string > > *arg4 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(fileType, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMFileReaderFactory_create" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(filename, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMFileReaderFactory_create" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(configFile, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMFileReaderFactory_create" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<std::string,std::allocator< std::string > > *ptr = (std::vector<std::string,std::allocator< std::string > > *)0;
    res4 = swig::asptr(s_args, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "CDMFileReaderFactory_create" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "CDMFileReaderFactory_create" "', argument " "4"" of type '" "std::vector< std::string,std::allocator< std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  try {
    result = MetNoFimex::CDMFileReaderFactory::create(arg1,arg2,arg3,(std::vector< std::string,std::allocator< std::string > > const &)*arg4);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj((new boost::shared_ptr< MetNoFimex::CDMReader >(static_cast< const boost::shared_ptr< MetNoFimex::CDMReader >& >(result))), SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, SWIG_POINTER_OWN |  0 );
  
  
  
  if (SWIG_IsNewObj(res4)) delete arg4;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_CDMFileReaderFactory_create__SWIG_1 ( SEXP fileType, SEXP filename, SEXP configFile, SEXP s_swig_copy)
{
  boost::shared_ptr< MetNoFimex::CDMReader > result;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(fileType, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMFileReaderFactory_create" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(filename, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMFileReaderFactory_create" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(configFile, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "CDMFileReaderFactory_create" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    result = MetNoFimex::CDMFileReaderFactory::create(arg1,arg2,arg3);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj((new boost::shared_ptr< MetNoFimex::CDMReader >(static_cast< const boost::shared_ptr< MetNoFimex::CDMReader >& >(result))), SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t, SWIG_POINTER_OWN |  0 );
  
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_CDMFileReaderFactory ( SEXP self)
{
  MetNoFimex::CDMFileReaderFactory *arg1 = (MetNoFimex::CDMFileReaderFactory *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__CDMFileReaderFactory, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CDMFileReaderFactory" "', argument " "1"" of type '" "MetNoFimex::CDMFileReaderFactory *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::CDMFileReaderFactory * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_NetCDF_CDMWriter__SWIG_0 ( SEXP reader, SEXP filename, SEXP configFile, SEXP version)
{
  MetNoFimex::NetCDF_CDMWriter *result = 0 ;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  int arg4 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NetCDF_CDMWriter" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NetCDF_CDMWriter" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(filename, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NetCDF_CDMWriter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NetCDF_CDMWriter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(configFile, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NetCDF_CDMWriter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  arg4 = static_cast< int >(INTEGER(version)[0]);
  try {
    result = (MetNoFimex::NetCDF_CDMWriter *)new MetNoFimex::NetCDF_CDMWriter(arg1,(std::string const &)*arg2,arg3,arg4);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__NetCDF_CDMWriter, R_SWIG_OWNER |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_NetCDF_CDMWriter__SWIG_1 ( SEXP reader, SEXP filename, SEXP configFile)
{
  MetNoFimex::NetCDF_CDMWriter *result = 0 ;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NetCDF_CDMWriter" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NetCDF_CDMWriter" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(filename, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NetCDF_CDMWriter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NetCDF_CDMWriter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(configFile, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NetCDF_CDMWriter" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  try {
    result = (MetNoFimex::NetCDF_CDMWriter *)new MetNoFimex::NetCDF_CDMWriter(arg1,(std::string const &)*arg2,arg3);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__NetCDF_CDMWriter, R_SWIG_OWNER |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_new_NetCDF_CDMWriter__SWIG_2 ( SEXP reader, SEXP filename)
{
  MetNoFimex::NetCDF_CDMWriter *result = 0 ;
  boost::shared_ptr< MetNoFimex::CDMReader > arg1 ;
  std::string *arg2 = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  {
    res1 = SWIG_R_ConvertPtr(reader, &argp1, SWIGTYPE_p_boost__shared_ptrT_MetNoFimex__CDMReader_t,  0 );
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NetCDF_CDMWriter" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NetCDF_CDMWriter" "', argument " "1"" of type '" "boost::shared_ptr< MetNoFimex::CDMReader >""'");
    } else {
      arg1 = *(reinterpret_cast< boost::shared_ptr< MetNoFimex::CDMReader > * >(argp1));
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(filename, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NetCDF_CDMWriter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NetCDF_CDMWriter" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  try {
    result = (MetNoFimex::NetCDF_CDMWriter *)new MetNoFimex::NetCDF_CDMWriter(arg1,(std::string const &)*arg2);
  }
  catch(MetNoFimex::CDMException &_e) {
    /*@SWIG:/usr/share/swig2.0/r/r.swg,29,%raise@*/ 
    return R_NilValue;
    /*@SWIG@*/;
  }
  
  r_ans = SWIG_R_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetNoFimex__NetCDF_CDMWriter, R_SWIG_OWNER |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  return r_ans;
}


SWIGEXPORT SEXP
R_swig_delete_NetCDF_CDMWriter ( SEXP self)
{
  MetNoFimex::NetCDF_CDMWriter *arg1 = (MetNoFimex::NetCDF_CDMWriter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int r_nprotect = 0;
  SEXP r_ans = R_NilValue ;
  VMAXTYPE r_vmax = vmaxget() ;
  
  res1 = SWIG_R_ConvertPtr(self, &argp1, SWIGTYPE_p_MetNoFimex__NetCDF_CDMWriter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NetCDF_CDMWriter" "', argument " "1"" of type '" "MetNoFimex::NetCDF_CDMWriter *""'"); 
  }
  arg1 = reinterpret_cast< MetNoFimex::NetCDF_CDMWriter * >(argp1);
  delete arg1;
  r_ans = R_NilValue;
  
  vmaxset(r_vmax);
  if(r_nprotect)  Rf_unprotect(r_nprotect);
  
  R_ClearExternalPtr(self);
  return r_ans;
}


#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_MetNoFimex__CDM = {"_p_MetNoFimex__CDM", "MetNoFimex::CDM *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetNoFimex__CDMFileReaderFactory = {"_p_MetNoFimex__CDMFileReaderFactory", "MetNoFimex::CDMFileReaderFactory *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetNoFimex__CDMReader = {"_p_MetNoFimex__CDMReader", "MetNoFimex::CDMReader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetNoFimex__NetCDF_CDMWriter = {"_p_MetNoFimex__NetCDF_CDMWriter", "MetNoFimex::NetCDF_CDMWriter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetNoFimex__SliceBuilder = {"_p_MetNoFimex__SliceBuilder", "MetNoFimex::SliceBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_MetNoFimex__CDMReader_t = {"_p_boost__shared_ptrT_MetNoFimex__CDMReader_t", "boost::shared_ptr< MetNoFimex::CDMReader > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t = {"_p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t", "boost::shared_ptr< MetNoFimex::CoordinateAxis const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mifi_cdm_reader = {"_p_mifi_cdm_reader", "mifi_cdm_reader *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mifi_slicebuilder = {"_p_mifi_slicebuilder", "mifi_slicebuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_double_t = {"_p_std__allocatorT_double_t", "std::vector< double >::allocator_type *|std::allocator< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_size_t_t = {"_p_std__allocatorT_size_t_t", "std::vector< size_t >::allocator_type *|std::allocator< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__allocatorT_std__string_t = {"_p_std__allocatorT_std__string_t", "std::vector< std::string >::allocator_type *|std::allocator< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t = {"_p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t", "std::vector< boost::shared_ptr< MetNoFimex::CoordinateSystem const >,std::allocator< boost::shared_ptr< MetNoFimex::CoordinateSystem const > > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_double_std__allocatorT_double_t_t = {"_p_std__vectorT_double_std__allocatorT_double_t_t", "std::vector< double,std::allocator< double > > *|std::vector< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t = {"_p_std__vectorT_size_t_std__allocatorT_size_t_t_t", "std::vector< size_t,std::allocator< size_t > > *|std::vector< size_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t = {"_p_std__vectorT_std__string_std__allocatorT_std__string_t_t", "std::vector< std::string,std::allocator< std::string > > *|std::vector< std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_MetNoFimex__CDM,
  &_swigt__p_MetNoFimex__CDMFileReaderFactory,
  &_swigt__p_MetNoFimex__CDMReader,
  &_swigt__p_MetNoFimex__NetCDF_CDMWriter,
  &_swigt__p_MetNoFimex__SliceBuilder,
  &_swigt__p_allocator_type,
  &_swigt__p_boost__shared_ptrT_MetNoFimex__CDMReader_t,
  &_swigt__p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_mifi_cdm_reader,
  &_swigt__p_mifi_slicebuilder,
  &_swigt__p_size_type,
  &_swigt__p_std__allocatorT_double_t,
  &_swigt__p_std__allocatorT_size_t_t,
  &_swigt__p_std__allocatorT_std__string_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t,
  &_swigt__p_std__vectorT_double_std__allocatorT_double_t_t,
  &_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  &_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_MetNoFimex__CDM[] = {  {&_swigt__p_MetNoFimex__CDM, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetNoFimex__CDMFileReaderFactory[] = {  {&_swigt__p_MetNoFimex__CDMFileReaderFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetNoFimex__CDMReader[] = {  {&_swigt__p_MetNoFimex__CDMReader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetNoFimex__NetCDF_CDMWriter[] = {  {&_swigt__p_MetNoFimex__NetCDF_CDMWriter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetNoFimex__SliceBuilder[] = {  {&_swigt__p_MetNoFimex__SliceBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_MetNoFimex__CDMReader_t[] = {  {&_swigt__p_boost__shared_ptrT_MetNoFimex__CDMReader_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t[] = {  {&_swigt__p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mifi_cdm_reader[] = {  {&_swigt__p_mifi_cdm_reader, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mifi_slicebuilder[] = {  {&_swigt__p_mifi_slicebuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_double_t[] = {  {&_swigt__p_std__allocatorT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_size_t_t[] = {  {&_swigt__p_std__allocatorT_size_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__allocatorT_std__string_t[] = {  {&_swigt__p_std__allocatorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t[] = {  {&_swigt__p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_double_std__allocatorT_double_t_t[] = {  {&_swigt__p_std__vectorT_double_std__allocatorT_double_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t[] = {  {&_swigt__p_std__vectorT_size_t_std__allocatorT_size_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t[] = {  {&_swigt__p_std__vectorT_std__string_std__allocatorT_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_MetNoFimex__CDM,
  _swigc__p_MetNoFimex__CDMFileReaderFactory,
  _swigc__p_MetNoFimex__CDMReader,
  _swigc__p_MetNoFimex__NetCDF_CDMWriter,
  _swigc__p_MetNoFimex__SliceBuilder,
  _swigc__p_allocator_type,
  _swigc__p_boost__shared_ptrT_MetNoFimex__CDMReader_t,
  _swigc__p_boost__shared_ptrT_MetNoFimex__CoordinateAxis_const_t,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_mifi_cdm_reader,
  _swigc__p_mifi_slicebuilder,
  _swigc__p_size_type,
  _swigc__p_std__allocatorT_double_t,
  _swigc__p_std__allocatorT_size_t_t,
  _swigc__p_std__allocatorT_std__string_t,
  _swigc__p_std__ostream,
  _swigc__p_std__vectorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_std__allocatorT_boost__shared_ptrT_MetNoFimex__CoordinateSystem_const_t_t_t,
  _swigc__p_std__vectorT_double_std__allocatorT_double_t_t,
  _swigc__p_std__vectorT_size_t_std__allocatorT_size_t_t_t,
  _swigc__p_std__vectorT_std__string_std__allocatorT_std__string_t_t,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */


/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


SWIGEXPORT void SWIG_init(void) {

}
#ifdef __cplusplus
extern "C" {
#endif

#include <R_ext/Rdynload.h>

#ifdef __cplusplus
}
#endif

SWIGINTERN R_CallMethodDef CallEntries[] = {
   {"R_swig_DoubleVector_reserve", (DL_FUNC) &R_swig_DoubleVector_reserve, 2},
   {"R_swig_IntVector_reserve", (DL_FUNC) &R_swig_IntVector_reserve, 2},
   {"R_swig_StringVector_reserve", (DL_FUNC) &R_swig_StringVector_reserve, 2},
   {"R_swig_StringVector_pop", (DL_FUNC) &R_swig_StringVector_pop, 2},
   {"R_swig_IntVector_pop", (DL_FUNC) &R_swig_IntVector_pop, 2},
   {"R_swig_DoubleVector_pop", (DL_FUNC) &R_swig_DoubleVector_pop, 2},
   {"R_swig_CDMReader_getCDM", (DL_FUNC) &R_swig_CDMReader_getCDM, 2},
   {"R_swig_boost__shared_ptrCDMReader_getCDM", (DL_FUNC) &R_swig_boost__shared_ptrCDMReader_getCDM, 2},
   {"R_swig_listCoordinateSystems", (DL_FUNC) &R_swig_listCoordinateSystems, 2},
   {"R_swig_delete_DoubleVector", (DL_FUNC) &R_swig_delete_DoubleVector, 1},
   {"R_swig_delete_StringVector", (DL_FUNC) &R_swig_delete_StringVector, 1},
   {"R_swig_listCoordinates", (DL_FUNC) &R_swig_listCoordinates, 4},
   {"R_swig_delete_CDMFileReaderFactory", (DL_FUNC) &R_swig_delete_CDMFileReaderFactory, 1},
   {"R_swig_DoubleVector_assign", (DL_FUNC) &R_swig_DoubleVector_assign, 3},
   {"R_swig_IntVector_assign", (DL_FUNC) &R_swig_IntVector_assign, 3},
   {"R_swig_DoubleVector_back", (DL_FUNC) &R_swig_DoubleVector_back, 2},
   {"R_swig_IntVector_back", (DL_FUNC) &R_swig_IntVector_back, 2},
   {"R_swig_StringVector_back", (DL_FUNC) &R_swig_StringVector_back, 2},
   {"R_swig_StringVector_assign", (DL_FUNC) &R_swig_StringVector_assign, 3},
   {"R_swig_mifi_slicebuilder_sb__get", (DL_FUNC) &R_swig_mifi_slicebuilder_sb__get, 1},
   {"R_swig_SliceBuilder_getDimensionStartPositions", (DL_FUNC) &R_swig_SliceBuilder_getDimensionStartPositions, 2},
   {"R_swig_boost__shared_ptrCDMReader_getSliceVecInUnit__SWIG_0", (DL_FUNC) &R_swig_boost__shared_ptrCDMReader_getSliceVecInUnit__SWIG_0, 5},
   {"R_swig_boost__shared_ptrCDMReader_getSliceVecInUnit__SWIG_1", (DL_FUNC) &R_swig_boost__shared_ptrCDMReader_getSliceVecInUnit__SWIG_1, 4},
   {"R_swig_StringVector___delslice__", (DL_FUNC) &R_swig_StringVector___delslice__, 3},
   {"R_swig_StringVector___setslice__", (DL_FUNC) &R_swig_StringVector___setslice__, 4},
   {"R_swig_StringVector___getslice__", (DL_FUNC) &R_swig_StringVector___getslice__, 3},
   {"R_swig_DoubleVector___delslice__", (DL_FUNC) &R_swig_DoubleVector___delslice__, 3},
   {"R_swig_IntVector___delslice__", (DL_FUNC) &R_swig_IntVector___delslice__, 3},
   {"R_swig_IntVector___setslice__", (DL_FUNC) &R_swig_IntVector___setslice__, 4},
   {"R_swig_IntVector___getslice__", (DL_FUNC) &R_swig_IntVector___getslice__, 3},
   {"R_swig_DoubleVector___getslice__", (DL_FUNC) &R_swig_DoubleVector___getslice__, 3},
   {"R_swig_DoubleVector___setslice__", (DL_FUNC) &R_swig_DoubleVector___setslice__, 4},
   {"R_swig_SliceBuilder_getDimensionNames", (DL_FUNC) &R_swig_SliceBuilder_getDimensionNames, 2},
   {"R_swig_SliceBuilder_getUnsetDimensionNames", (DL_FUNC) &R_swig_SliceBuilder_getUnsetDimensionNames, 2},
   {"R_swig_StringVector_append", (DL_FUNC) &R_swig_StringVector_append, 2},
   {"R_swig_DoubleVector_append", (DL_FUNC) &R_swig_DoubleVector_append, 2},
   {"R_swig_IntVector_append", (DL_FUNC) &R_swig_IntVector_append, 2},
   {"R_swig_StringVector_empty", (DL_FUNC) &R_swig_StringVector_empty, 2},
   {"R_swig_DoubleVector_empty", (DL_FUNC) &R_swig_DoubleVector_empty, 2},
   {"R_swig_IntVector_empty", (DL_FUNC) &R_swig_IntVector_empty, 2},
   {"R_swig_delete_IntVector", (DL_FUNC) &R_swig_delete_IntVector, 1},
   {"R_swig_StringVector_size", (DL_FUNC) &R_swig_StringVector_size, 2},
   {"R_swig_DoubleVector_size", (DL_FUNC) &R_swig_DoubleVector_size, 2},
   {"R_swig_IntVector_size", (DL_FUNC) &R_swig_IntVector_size, 2},
   {"R_swig_StringVector___len__", (DL_FUNC) &R_swig_StringVector___len__, 2},
   {"R_swig_IntVector___len__", (DL_FUNC) &R_swig_IntVector___len__, 2},
   {"R_swig_DoubleVector___len__", (DL_FUNC) &R_swig_DoubleVector___len__, 2},
   {"R_swig___lshift__", (DL_FUNC) &R_swig___lshift__, 3},
   {"R_swig_delete_CDMReader", (DL_FUNC) &R_swig_delete_CDMReader, 1},
   {"R_swig_delete_boost__shared_ptrCDMReader", (DL_FUNC) &R_swig_delete_boost__shared_ptrCDMReader, 1},
   {"R_swig_StringVector___setitem__", (DL_FUNC) &R_swig_StringVector___setitem__, 3},
   {"R_swig_StringVector___getitem__", (DL_FUNC) &R_swig_StringVector___getitem__, 3},
   {"R_swig_StringVector___delitem__", (DL_FUNC) &R_swig_StringVector___delitem__, 2},
   {"R_swig_DoubleVector___setitem__", (DL_FUNC) &R_swig_DoubleVector___setitem__, 3},
   {"R_swig_DoubleVector___getitem__", (DL_FUNC) &R_swig_DoubleVector___getitem__, 3},
   {"R_swig_DoubleVector___delitem__", (DL_FUNC) &R_swig_DoubleVector___delitem__, 2},
   {"R_swig_IntVector___setitem__", (DL_FUNC) &R_swig_IntVector___setitem__, 3},
   {"R_swig_IntVector___getitem__", (DL_FUNC) &R_swig_IntVector___getitem__, 3},
   {"R_swig_IntVector___delitem__", (DL_FUNC) &R_swig_IntVector___delitem__, 2},
   {"R_swig_new_mifi_slicebuilder", (DL_FUNC) &R_swig_new_mifi_slicebuilder, 1},
   {"R_swig_delete_mifi_slicebuilder", (DL_FUNC) &R_swig_delete_mifi_slicebuilder, 1},
   {"R_swig_delete_SliceBuilder", (DL_FUNC) &R_swig_delete_SliceBuilder, 1},
   {"R_swig_new_StringVector__SWIG_0", (DL_FUNC) &R_swig_new_StringVector__SWIG_0, 0},
   {"R_swig_DoubleVector_resize__SWIG_0", (DL_FUNC) &R_swig_DoubleVector_resize__SWIG_0, 2},
   {"R_swig_new_DoubleVector__SWIG_0", (DL_FUNC) &R_swig_new_DoubleVector__SWIG_0, 0},
   {"R_swig_new_IntVector__SWIG_0", (DL_FUNC) &R_swig_new_IntVector__SWIG_0, 0},
   {"R_swig_IntVector_resize__SWIG_0", (DL_FUNC) &R_swig_IntVector_resize__SWIG_0, 2},
   {"R_swig_StringVector_resize__SWIG_0", (DL_FUNC) &R_swig_StringVector_resize__SWIG_0, 2},
   {"R_swig_new_SliceBuilder__SWIG_0", (DL_FUNC) &R_swig_new_SliceBuilder__SWIG_0, 3},
   {"R_swig_SliceBuilder_setStartAndSize__SWIG_0", (DL_FUNC) &R_swig_SliceBuilder_setStartAndSize__SWIG_0, 4},
   {"R_swig_SliceBuilder_setAll__SWIG_0", (DL_FUNC) &R_swig_SliceBuilder_setAll__SWIG_0, 2},
   {"R_swig_CDMReader_getSliceVecInUnit__SWIG_0", (DL_FUNC) &R_swig_CDMReader_getSliceVecInUnit__SWIG_0, 5},
   {"R_swig_CDMFileReaderFactory_create__SWIG_0", (DL_FUNC) &R_swig_CDMFileReaderFactory_create__SWIG_0, 5},
   {"R_swig_new_NetCDF_CDMWriter__SWIG_0", (DL_FUNC) &R_swig_new_NetCDF_CDMWriter__SWIG_0, 4},
   {"R_swig_new_StringVector__SWIG_1", (DL_FUNC) &R_swig_new_StringVector__SWIG_1, 1},
   {"R_swig_DoubleVector_resize__SWIG_1", (DL_FUNC) &R_swig_DoubleVector_resize__SWIG_1, 3},
   {"R_swig_new_DoubleVector__SWIG_1", (DL_FUNC) &R_swig_new_DoubleVector__SWIG_1, 1},
   {"R_swig_new_IntVector__SWIG_1", (DL_FUNC) &R_swig_new_IntVector__SWIG_1, 1},
   {"R_swig_IntVector_resize__SWIG_1", (DL_FUNC) &R_swig_IntVector_resize__SWIG_1, 3},
   {"R_swig_StringVector_resize__SWIG_1", (DL_FUNC) &R_swig_StringVector_resize__SWIG_1, 3},
   {"R_swig_mifi_get_unique_forecast_reference_time", (DL_FUNC) &R_swig_mifi_get_unique_forecast_reference_time, 3},
   {"R_swig_new_SliceBuilder__SWIG_1", (DL_FUNC) &R_swig_new_SliceBuilder__SWIG_1, 2},
   {"R_swig_SliceBuilder_setStartAndSize__SWIG_1", (DL_FUNC) &R_swig_SliceBuilder_setStartAndSize__SWIG_1, 4},
   {"R_swig_SliceBuilder_setAll__SWIG_1", (DL_FUNC) &R_swig_SliceBuilder_setAll__SWIG_1, 2},
   {"R_swig_CDMReader_getSliceVecInUnit__SWIG_1", (DL_FUNC) &R_swig_CDMReader_getSliceVecInUnit__SWIG_1, 4},
   {"R_swig_CDMFileReaderFactory_create__SWIG_1", (DL_FUNC) &R_swig_CDMFileReaderFactory_create__SWIG_1, 4},
   {"R_swig_new_NetCDF_CDMWriter__SWIG_1", (DL_FUNC) &R_swig_new_NetCDF_CDMWriter__SWIG_1, 3},
   {"R_swig_new_DoubleVector__SWIG_2", (DL_FUNC) &R_swig_new_DoubleVector__SWIG_2, 1},
   {"R_swig_new_IntVector__SWIG_2", (DL_FUNC) &R_swig_new_IntVector__SWIG_2, 1},
   {"R_swig_new_StringVector__SWIG_2", (DL_FUNC) &R_swig_new_StringVector__SWIG_2, 1},
   {"R_swig_mifi_get_variable_number", (DL_FUNC) &R_swig_mifi_get_variable_number, 2},
   {"R_swig_new_SliceBuilder__SWIG_2", (DL_FUNC) &R_swig_new_SliceBuilder__SWIG_2, 2},
   {"R_swig_new_NetCDF_CDMWriter__SWIG_2", (DL_FUNC) &R_swig_new_NetCDF_CDMWriter__SWIG_2, 2},
   {"R_swig_new_DoubleVector__SWIG_3", (DL_FUNC) &R_swig_new_DoubleVector__SWIG_3, 2},
   {"R_swig_new_IntVector__SWIG_3", (DL_FUNC) &R_swig_new_IntVector__SWIG_3, 2},
   {"R_swig_new_StringVector__SWIG_3", (DL_FUNC) &R_swig_new_StringVector__SWIG_3, 2},
   {"R_swig_DoubleVector_capacity", (DL_FUNC) &R_swig_DoubleVector_capacity, 2},
   {"R_swig_IntVector_capacity", (DL_FUNC) &R_swig_IntVector_capacity, 2},
   {"R_swig_StringVector_capacity", (DL_FUNC) &R_swig_StringVector_capacity, 2},
   {"R_swig_SliceBuilder_getDimensionSizes", (DL_FUNC) &R_swig_SliceBuilder_getDimensionSizes, 2},
   {"R_swig_SliceBuilder_getMaxDimensionSizes", (DL_FUNC) &R_swig_SliceBuilder_getMaxDimensionSizes, 2},
   {"R_swig_DoubleVector_push_back", (DL_FUNC) &R_swig_DoubleVector_push_back, 2},
   {"R_swig_IntVector_push_back", (DL_FUNC) &R_swig_IntVector_push_back, 2},
   {"R_swig_StringVector_push_back", (DL_FUNC) &R_swig_StringVector_push_back, 2},
   {"R_swig_mifi_slicebuilder_sb__set", (DL_FUNC) &R_swig_mifi_slicebuilder_sb__set, 2},
   {"R_swig_DoubleVector_get_allocator", (DL_FUNC) &R_swig_DoubleVector_get_allocator, 2},
   {"R_swig_IntVector_get_allocator", (DL_FUNC) &R_swig_IntVector_get_allocator, 2},
   {"R_swig_StringVector_get_allocator", (DL_FUNC) &R_swig_StringVector_get_allocator, 2},
   {"R_swig_mifi_get_variable_name", (DL_FUNC) &R_swig_mifi_get_variable_name, 2},
   {"R_swig_new_mifi_cdm_reader", (DL_FUNC) &R_swig_new_mifi_cdm_reader, 1},
   {"R_swig_delete_mifi_cdm_reader", (DL_FUNC) &R_swig_delete_mifi_cdm_reader, 1},
   {"R_swig_latLonInterpolatedReader", (DL_FUNC) &R_swig_latLonInterpolatedReader, 5},
   {"R_swig_vectorAutoRotatedReader", (DL_FUNC) &R_swig_vectorAutoRotatedReader, 3},
   {"R_swig_DoubleVector_pop_back", (DL_FUNC) &R_swig_DoubleVector_pop_back, 1},
   {"R_swig_IntVector_pop_back", (DL_FUNC) &R_swig_IntVector_pop_back, 1},
   {"R_swig_StringVector_pop_back", (DL_FUNC) &R_swig_StringVector_pop_back, 1},
   {"R_swig_delete_NetCDF_CDMWriter", (DL_FUNC) &R_swig_delete_NetCDF_CDMWriter, 1},
   {"R_swig_StringVector_swap", (DL_FUNC) &R_swig_StringVector_swap, 2},
   {"R_swig_DoubleVector_swap", (DL_FUNC) &R_swig_DoubleVector_swap, 2},
   {"R_swig_IntVector_swap", (DL_FUNC) &R_swig_IntVector_swap, 2},
   {"R_swig_StringVector___nonzero__", (DL_FUNC) &R_swig_StringVector___nonzero__, 2},
   {"R_swig_IntVector___nonzero__", (DL_FUNC) &R_swig_IntVector___nonzero__, 2},
   {"R_swig_DoubleVector___nonzero__", (DL_FUNC) &R_swig_DoubleVector___nonzero__, 2},
   {"R_swig_mifi_cdm_reader_get", (DL_FUNC) &R_swig_mifi_cdm_reader_get, 2},
   {"R_swig_DoubleVector_front", (DL_FUNC) &R_swig_DoubleVector_front, 2},
   {"R_swig_IntVector_front", (DL_FUNC) &R_swig_IntVector_front, 2},
   {"R_swig_StringVector_front", (DL_FUNC) &R_swig_StringVector_front, 2},
   {"R_swig_StringVector_clear", (DL_FUNC) &R_swig_StringVector_clear, 1},
   {"R_swig_DoubleVector_clear", (DL_FUNC) &R_swig_DoubleVector_clear, 1},
   {"R_swig_IntVector_clear", (DL_FUNC) &R_swig_IntVector_clear, 1},
   {"R_swig_delete_CDM", (DL_FUNC) &R_swig_delete_CDM, 1},
   {"R_swig_boost__shared_ptrCDMReader___deref__", (DL_FUNC) &R_swig_boost__shared_ptrCDMReader___deref__, 1},
   {NULL, NULL, 0}
};

extern "C" SWIGEXPORT void R_init_RFimex(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);


SWIG_init();
SWIG_InitializeModule(0);


}

